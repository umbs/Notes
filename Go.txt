***********************   Test With Go (Jon Calhoun) **********************
References:
[1] https://github.com/joncalhoun/twg
[2] https://golang.org/pkg/testing/#pkg-index


CHAPTER: Naming Conventions
----------


File Naming Conventions: Usually, the convention is as follows:
-----
    math.go
    math_test.go

- `export_test.go`: access unexported variables in external tests.
- `xxx_internal_test.go`: for internal tests.
- `example_xxx_test.go`: for examples in isolated files.

Function Naming Conventions:
-----
- Typically:
    func TestXXX(t *testing.T) {
    }

- How to write test case for following code

    import "fmt"

    type Dog struct {
        Name    string
        Age     int
    }

    func (d Dog) Bark(muzzled bool) {
        if muzzled {
            fmt.Println("woof")
        } else {
            fmt.Println("WOOF!!")
        }
    }


    func TestDog_Bark(t *testing.T) {
        ...
    }

    func TestDog_Bark_muzzled(t *testing.T) {
        ...
    }

    func TestDog_Bark_unmuzzled(t *testing.T) {
        ...
    }

    etc

Variable Naming Conventions:
-----
- Use `want` and `got`. By far mostly used.
- Some people use `actual` and `expected`






CHAPTER: Failing Tests
---------

Ways to signal test failure
---------
- Log()/Logf() is similar to Print()/Printf(). They only show up if Test fails or Verbose flag is passed (-v).
- Fail() will mark test as failed but continue running till end of the test.
- FailNow() will mark test as failed and aborts immediately.


    Error() = Log() + Fail()
    Errorf() = Logf() + Fail()
    Fatal() = Log() + FailNow()
    Fatalf() = Logf() + FailNow()

- If you want to keep running the test, use Error()/Errorf()
- If you want to stop the test, use Fatal()/Fatalf()


- Suggested failure message convention
    t.Errorf("SomeFunc(%v) err = %v; want %v", args, error, want)





CHAPTER: Examples as Test Cases
--------
- Example code can be used for both UT and Documentation.
- It is written just like a test case, without input argument.

- So, how is this written?

    func Hello(name string) string {
        return fmt.Sprintf("Hello %s", name)
    }

    // This naming convention is MUST
    func ExampleHello() {
        greeting := Hello("Bhaskar")
        fmt.Println(greeting)

        // Output: Hello Bhaskar
	// OR
	// Output:
	// Hello Bhaskar
    }

    - Run `go test`, just like any other test.
    - For documentation, run `godoc -http=:3000` and go to `localhost:3000` in the browswer to view docs.



Testing unordered example output
-----
- How to test output that is not gauranteed to be in any order, like a range over maps?

    func Page(checkIns map[string]bool) {
        for name, checkIn := range checkIns {
            if !checkIn {
                fmt.Printf("Paging %s; please see the front desk to check in.\n", name)
            }
        }
    }

    func ExamplePage() {
        checkIns := map[string]bool {
            "Bob":      true,
            "Alice":    false,
            "Eve":      false,
            "Janet":    true,
            "Susan":    true,
            "John":     false,
        }
        Page(checkIns)

        // MUST put 'Unordered output' instead of just 'Output' to solve this

        // Unordered output:
        // Paging Alice; please see the front desk to check in.
        // Paging Eve; please see the front desk to check in.
        // Paging John; please see the front desk to check in.
    }


Complex Examples
------
- Lot of good things in this video
    https://courses.calhoun.io/lessons/les_twg_les_16

- In output of `godoc`, the Example() code does not show `import` statements.
  It only shows code inside `Example()` function. What to do?
    - Have single example file like `example_xxx_test.go`
    - declare an unused variable at the beginning and only then imports show up
      in the `godoc`

- Watch the video. It is very good.




Examples in the Standard Library
------
https://golang.org/src/image
	decode_example_test.go


- How to find source of a certain package?
	1. Go to pkg documentation (Google it) --> https://golang.org/pkg/sort
	2. Click on a function, which takes you to it's documentation: func Float64s(a []float64)
	3. Click on the function, which takes you to it's source :)
	4. https://golang.org/src/sort
		Lot of example tests





CHAPTER: Testing Multiple Cases - START
-------------
- Table Driven Tests is a design pattern. Look at 'underscore' directory in Jon
  Calhoun github repo.
- Subtests are whenever we call tt.Run() method.
- Shared setup and teardown.
- Look at 'psql' directory to setup DB and teardown after tests.
    - Very good example of test setup and teardown.

- TestMain()
    - Called before all other tests.

    func TestMain(m *testing.M) {
        // 0. flag.Parse() if you need flags
        // 1. Setup anything you need
        // 2. explicitly run your tests from here
            exitCode := m.Run()

        // 3. Call Exit with same exitCode. os.Exit() when called, stops the
        // program immediately. It does not run `defer` functions.
            os.Exit(exitCode)

    }



CHAPTER: Parallel Tests
--------------
- 'parallel' package has all code in 'twg' repo.
- All tests that have following is put in a queue to run tests in Parallel
    t.Parallel()

- Advise:
    - Run tests in Parallel only to test parallelism which happens in real world scenario.
    - DO NOT RUN IT for speed boost. When/If you see issues in your tests,
      fixing it takes LOT of time that it'll be net negative in the end.
    - Use it when there's clear reason to use it.

- Setup and Tear Down
    - To have parallel subtests obey setup and teardown behavior, you have to
      wrap all subtests in another t.Run()


- Closure Gotcha's

    func TestGotcha(t *testing.T) {
        for i := 0; i < 10; i++  {
            t.Run(fmt.Sprintf("i=%d", i), func(t *testing.T) {
                t.Parallel()
                t.Logf("Testing with i=%d", i)      <<<<< this is not accessible within subtest.
            })
        }
    }
    - Watch the video. Very insightful.


CHAPTER: Testing Race Conditions
--------------
TODO. Come back later and watch this.




CHAPTER: Comparing Objects for Equality
--------------
- 'compare' directory
- Read this:
    https://golang.org/ref/spec#Comparison_operators

- 'reflect' package is used.
    - reflect.DeepEquals()
    - Can compare Slices, Maps etc.
    - https://golang.org/pkg/reflect/#DeepEqual
    - People have different opinions about 'reflect' package.


Golden Files
---
- "Golden Files" are files that are desired output.
- They are used when we have to compare large files (csv, images, etc) in test
  cases.
- Typically, "Golden Files" are saved in same directory as tests.


Helper Comparison Functions
---
- TODO


CHAPTER: Testing Utilities
--------------
TODO. Come back later and watch this.


CHAPTER: Controlling Which tests are run
--------------
TODO. Come back later and watch this.


CHAPTER: Addtional Testing Flags
--------------
TODO. Come back later and watch this.


CHAPTER: External and Internal Testing
--------------
TODO. Come back later and watch this.


CHAPTER: Types of Tests
--------------
TODO. Come back later and watch this.


CHAPTER: State
--------------
TODO. Come back later and watch this.


CHAPTER: Dependency Injection (DI)
--------------
TODO. Come back later and watch this.


CHAPTER: Mocks, Stubs, and Fakes
--------------
- Third Party Packages
    - github.com/josharian/impl
    - github.com/golang/mock
    - github.com/matryer/moq

    - In Go, you really don't need third party packages. Just providing an
      implementation to an interface is enough.

Faking APIs
---
- API calls go through, but they go to *your* endpoint and returns responses
  *you* defined for testing.


CHAPTER: Interface Test Suites
--------------


CHAPTER: Testing with HTTP
--------------


===========================================================================

********   Go Environment Variables Explained   *******
GOBIN
GOPATH
GOROOT

********   Go Commands Explained   *******
go build:
    - Compiles code and moves executable to GOPATH/bin/<executable>. Discards
      the packages.

go get:
    - Flags:
        - Use -x flag for details when command runs.
        - Use -d flag to only download repos and packages but not compile them.
        - Use -u flag to update packages and their dependencies.

    - Read this. Very good resource.
        - https://github.com/NanXiao/golang-101-hacks/blob/master/posts/go-get-command.md

go install:
    - Compiles code and moves the executable to $GOPATH/bin and installs all non-main
      packages in $GOPATH/pkg.
    - The cache will be used during the next compilation provided the source
      did not change yet.

    - Read this to understand differences between `go build` and `go install`
        - https://github.com/NanXiao/golang-101-hacks/blob/master/posts/go-build-vs-go-install.md

go run:
    - Compiles and runs the program.

go mod:

********   Go Testing By Example (Russ Cox GopherCon Australia 2023)    *******

Tip #1: Make it easy to add new test cases.
Tip #2: Use test coverage to add new tests.
    $ go test -coverprofile=c.out
    $ go tool cover -html=c.out
Tip #3: Coverage is no substitute for thought.
    - Fuzzing is designed to input as many variety of data as possible. Even
      Fuzzing is no substitute for thought.

Tip #4: Write exhaustive tests.
    - If you can test every possible input to a function, you should. While it
      may sound unrealistic, we can test up to a certain input under certain
      constraints.

    - In the talk, author has *another* implementation of code under test. This
      reference implementation is supposed to be correct. If required, we can
      write UT for that reference implementation too. Back to the point ....
    - Actual implementation and reference implementation output can be
      compared.

Tip #5: Separate test cases from test logic.
    - In Table-Driven-Tests, the cases are in the table and the loop that
      processes them contains test logic.
    - Because they are separated, the table can be used in multiple contexts.

Tip #6: Look for special cases.

Tip #7: If you didn't add a test, you didn't fix the bug.
    - Look at
        - go/src/fmt/fmt_test.go

Tip #8: Not every test fits in a table.
    - Look at
        - go/src/strconv/fp_test.go
        - go/src/strconv/testdata/testfp.txt
    - Extracting test input data out to it's own files actually makes testing
      easier because of less Go syntax and code.
    - Writing mini-parser for test input data is not much harder and has many
      benefits.

Tip #9: Test cases can be in testdata files.
    - Tests don't have to be in source code.
    - Look at
        - go/src/regexp/testdata/basic.dat
    -  Another way to store test cases in files is to have pairs of files.
       "File Driven" testing. One for input and one for output.
            - go/src/cmd/internal/test2json/testdata
                - ascii.json; ascii.test
                - bench.json; bench.test
                - issue23036.json; issue23036.test
                - ...

Tip #10: Compare against other implementations

Tip #11: Make test failures readable.
Tip #12: If the answers can change, write code to update them.
    - Not sure I understood.

Tip #13: Use txtar for multi-file test cases.
    - import "golang.org/x/tools/txtar"

Tip #14:
Tip #15:

Tip #16: Code quality is limited by test quality.
    - Watch the video ... it brings ideas from earlier tips and shows how UTs
      were written for `go` command.

Tip #17: Scripts make good test cases.
Tip #18: Try rsc.io/script for your own script based test cases.

Tip #19:
Tip #20:

Reference:
[1] https://www.youtube.com/watch?v=X4rxi9jStLo

***********************   Go Environment Variables   **********************
GOPROXY =
GOPRIVATE =

GOOS & GOARCH
GOPATH & GO111MODULE
GOCACHE & GOTMPDIR
GOBIN & GOPROXY
GOFLAGS
GOENV
GOTRACEBACK
GODEBUG

Reference:
[1] https://medium.com/@souravchoudhary0306/go-your-own-way-customizing-go-with-environment-variables-3e47c880fe34



***********************   Notes from `Go by Example`   **********************
    1. Values
            - string, integers, boolean, flots, structs (user defined)
            - strings can be added with +

    2. Variables
            - `var` declares one or more variables with the type specified at the end
            - Go can infer type from initialized value
            - Walrus operator ( := ) declares and initializes variables

    3. Constants
            - Can be used where `var` is used.

    4. For
            - Only loop in Go.

    5. If/Else
            - Like `for`, this has no braces.

    6. Switch
        -

    7. Arrays

    8. Slices

    9. Maps
    10. Range
    11. Functions
    12. Multiple Return Values
    13. Variadic Functions
    14. Closures
    15. Recursion
    16. Pointers
    17a. Strings
            - read-only slice of bytes. The language and the standard library treat
              strings specially - as containers of text encoded in UTF-8.
            - strings are equivalent to []byte
            - Indexing into a string produces the raw byte values at each index.


    17b. Runes
            - In Go, the concept of a character is called a rune - it’s an integer
              that represents a Unicode code point.
            - https://go.dev/blog/strings


    18. Structs
    19. Methods
            - Go supports methods defined on struct types.
            - Methods on struct can have "receiver type", which could be a pointer or a value.

    20. Interfaces
            - 'Interfaces' are named collections of method signatures.
            - To implement an interface, implement all its methods.
            - If a variable has interface type, we can call methods on its interface.

    21. Struct Embedding
            - Go allows embedding of structs and interfaces.

    22. Generics
            - Type parameters


    23. Errors
    24. Goroutines
    25. Channels
    26. Channel Buffering
    27. Channel Synchronization
    28. Channel Directions
    29. Select
    30. Timeouts
    31. Non-Blocking Channel Operations
    32. Closing Channels
    33. Range over Channels
    34. Timers
    35. Tickers
    36. Worker Pools
    37. WaitGroups
    38. Rate Limiting
    39. Atomic Counters


    40. Mutexes
    41. Stateful Goroutines
    42. Sorting
    43. Sorting by Functions
    44. Panic
    45. Defer
    46. Recover
    47. String Functions
    48. String Formatting
    49. Text Templates
    50. Regular Expressions
    51. JSON
    52. XML
    53. Time
    54. Epoch
    55. Time Formatting / Parsing
    56. Random Numbers
    57. Number Parsing
    58. URL Parsing
    59. SHA256 Hashes
    60. Base64 Encoding
    61. Reading Files
    62. Writing Files
    63. Line Filters
    64. File Paths
    65. Directories
    66. Temporary Files and Directories
    67. Embed Directive
    68. Testing and Benchmarking
    69. Command-Line Arguments
    70. Command-Line Flags
    71. Command-Line Subcommands
    72. Environment Variables
    73. Logging
    74. HTTP Client
    75. HTTP Server
    76. Context
    77. Spawning Processes
    78. Exec'ing Processes
    79. Signals
    80. Exit


@@@@@@@@@@@@@@@@@@@@@@@@@@@     Go Templates     @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@

- At its core, a Go template is a string or file containing text and "actions."
- Actions are enclosed in double curly braces {{...}} and are the placeholders
  for dynamic data and control structures.

There are two primary template packages in Go's standard library:
    - text/template: For generating any kind of plain text output.
    - html/template: Specifically for generating HTML. This package
      automatically handles HTML escaping, which is crucial for preventing
      Cross-Site Scripting (XSS) vulnerabilities.

A Simple Example
----

        package main

        import (
            "os"
            "text/template"
        )

        func main() {
            // Define a struct to hold our data
            type User struct {
                Name string
            }

            // Create a user instance
            user := User{Name: "World"}

            // Parse the template string
            t, err := template.New("hello").Parse("Hello, {{.Name}}!\n")
            if err != nil {
                panic(err)
            }

            // Execute the template, passing in the user data
            err = t.Execute(os.Stdout, user)
            if err != nil {
                panic(err)
            }
        }

        Template:
            Hello, {{.Name}}!

        Output:
            Hello, World!

- In this example, {{.Name}} is an action.
- The dot (.) represents current data object being passed to the template.
- In this case, it's the user struct, and `.Name` accesses the `Name` field of
  that struct.


- Go templates can handle various data structures like structs, maps, slices.
- You access struct fields using a dot followed by field name: {{.FieldName}}
- The field must be exported (starting with Capital letter) to be accessible
  within the template.

Maps:
---
- For accessing maps, you can use dot notation with the key. Example:

		package main

		import (
			"os"
			"text/template"
		)

		func main() {
			data := map[string]string{
				"greeting": "Hola",
				"name":     "Amigo",
			}

			t, _ := template.New("map").Parse("{{.greeting}}, {{.name}}!\n")
			t.Execute(os.Stdout, data)
		}

        Template:
            {{.greeting}}, {{.name}}

        Output:
            Hola, Amigos


Conditionals:
---
- The `if` action lets you render a block of template conditionally.
- An empty string, false, 0, nil, or empty slice/maps is considered false.


		package main

		import (
			"os"
			"text/template"
		)

		func main() {
			type User struct {
				Name    string
				IsAdmin bool
			}

			user1 := User{Name: "Alice", IsAdmin: true}
			user2 := User{Name: "Bob", IsAdmin: false}

			t, _ := template.New("auth").Parse("{{if .IsAdmin}}Welcome, Admin {{.Name}}!{{else}}Hello, {{.Name}}.{{end}}\n")

			t.Execute(os.Stdout, user1)
			t.Execute(os.Stdout, user2)
		}


		Template:
			{{if .IsAdmin}}Welcome, Admin {{.Name}}!{{else}}Hello, {{.Name}}.{{end}}

		Output:
			Welcome, Admin Alice!
			Hello, Bob.


Loops: `range`
---
- The `range` action iterates over a slice, array, map or channel.
- Inside the `range` block, the dot (.) is rebound to the current element of
  the iteration.

		package main

		import (
			"os"
			"text/template"
		)

		func main() {
			items := []string{"Apples", "Bananas", "Cherries"}

			t, _ := template.New("list").Parse("My favorite fruits:\n{{range .}}- {{.}}\n{{end}}")
			t.Execute(os.Stdout, items)
		}

		Template:
			My favorite fruits:
			{{range .}}- {{.}}
			{{end}}

		Output:
			My favorite fruits:
			- Apples
			- Bananas
			- Cherries

- You can use `range` with `else` to handle empty collections:

		{{range .Items}}
		  <p>{{.}}</p>
		{{else}}
		  <p>There are no items to display.</p>
		{{end}}



Pipelines & Functions:
---
- Go templates support the concept of "pipelines," where the output of one
  action can be passed as the input to the next.
- This is often used with built-in or custom functions.
- In below example `printf` is a built-in function.

        package main

        import (
            "os"
            "text/template"
        )

        func main() {
            t, _ := template.New("func").Parse(`{{. | printf "The value is: %q"}}`)
            t.Execute(os.Stdout, "some text")
        }

        Template:
            {{. | printf "The value is: %q"}}

        Output:
            The value is: "some text"

- In this example, the dot (.) representing the input string "some text" is
  piped (|) into the printf function.


Whitespace Control:
---
Sometimes, newline and spaces in your template can result in unwanted
whitespace in the output. You can control this using hyphen (-) inside action
delimiters.
    {{- (hyphen at the beginning): Trims whitespace before the action.
    -}} (hyphen at the end): Trims whitespace after the action.



Nested Templates (Sub-Templates)
----
As your templates grow in complexity, it becomes useful to break them down into
smaller, reusable components. For example, a website might have a common header
and footer across multiple pages.


- The {{template "templateName"}} action is used to render another template
  within current one.
- If you want to pass subset of data to the nested template, you can use
  {{template "templateName" .Data}}










Hello World Example (HTML)
-------------------
hello.html
---
{{ template "header" }}
Hello World! My name is {{ .name }}.
{{ template "footer" }}

common.html
---
{{ define "header" }}
{{ end }}

{{ define "footer" }}
{{ end }}

1. Template Composition
2. Syntax and Variables
3. Functions, methods and pipes

- Templates are mostly used to output HTML, but there are other use cases (like Terraform templates)

- In other templating engines (Django, Jinja2, Laravel blade etc), template references are static
    e.g. {% include "partials/header.html" %}
        - references a specific template relative to the template dir


- Go's template references are dynamic and you must *compose* the templates yourself
    e.g. {{ template "header" }}
        - What is "header"? It depends on what templates you composed together.



- Big Idea:
    - In Go, a template is essentially a map[string]*Template
    - When you compose templates together, you are populating this
      map[string]*Template data structure


Syntax and Variables:

{{ define ... }}
{{ template ... }}
{{ block .. }} {{ end }}
{{ if <var> }} {{ else if <var> }} {{ else }} {{ end }}
{{ with <var> }} {{ end }}
{{ range <var> }} {{ else }} {{ end }}

- Everything else (and, or, not, len, index etc) is a function.
- Every template has access to exactly one variable, denoted by dot '.'
    - This is whatever variable you passed into Execute()/ExecuteTemplate()


NOTE: Read Hashicorp link and Go's original reference page.


Reference:
[1] https://www.youtube.com/watch?v=k5wJv4XO7a0  <<< very tough to understand this.
[2] https://developer.hashicorp.com/nomad/tutorials/templates/go-template-syntax
[3] https://pkg.go.dev/text/template

*************************** Concurrency in Go ***********************************
CSP = Communicating Sequential Processes
    - Technique and name of paper that introduced it in 1978 by Charles Anthony Richard Hoare.


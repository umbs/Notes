ABC - Always Be Coding

1. FOCUSED PRACTICE: 
ABC - Always be coding, on different projects. Have goals and very FOCUSED
practice. 
  - Work on new & short projects. At least one project every 6 months.  
  - Publish on GitHub CONTINUOUSLY. 

Suggestions: 
  - Build a database of ideas and start working. 
  - Start contributing to open source: Linux Kernel, Mininet, Linux
    Containers, Some OS related repo. 
  - TopCoder; CodeChef; CodeEval; USACO; Project-Euler

2. Re-Build The Wheel:  
Code all basic data structures in various languages: 
        Dynamic Array 
        Singly-Linked List (sorted/unsorted) 
        Doubly-Linked List 
        Skip List 
        Binary Search Tree 
        Cartesian Tree 
        B-Tree 
        Red-Black Tree
        B+ Tree
        Splay Tree 
        AVL Tree
        Trie/Patricia Tree
        Stack 
        Queue 
        Circular Queues 
        Hash Table 
        Hash Map 
        Hash Tree 
        Set 
        Heaps/Priority Queue  

Heaps 
        Binary Heap 
        Binomial Heap 
        Fibonacci Heap 

Graphs 
        Adjacency List 
        Incidence List 
        Adjacency Matrix 
        Incidence Matrix 


3. Solve word problems. Spend time coding solutions to different types of
problems. One of the best resources is TopCoder. Read this, then try
solving problems. Pick those that test your ability to implement
recursive, pattern-matching, greedy, dynamic programming, and graph
problems. Just go through a bunch of archived problems.

This is probably the number one reason I was hired at Google. I spent
literally two weeks obsessed with TopCoder. After that, I could code
Dijkstra’s algorithm with my eyes closed and one arm tied behind my back.
I could solve almost any kind of graph-problem under the sun. It was all
problem-solving repetition. And as Eric Schmidt says, “Repetition doesn’t
spoil the prayer.”

4. Build small products. Look at the startups around you, can you rebuild
some portion of their product? Chances are you can do it in a weekend. You
can build the initial essence of Google in a weekend (PageRank over a
structured document corpus) if you really want.

Again, just keep coding. Keep a growing list of projects and ideas for
what you can build in minutes, days and weeks.

================
NETWORKING 
CCNA Notes: 
Other Protocols: 
  Bridging, STP, RSTP, OSPF, BGP, MPLS, PW, IPv6, SNMP

================
ALGORITHMS
================
Data Structures: 
  Basic: Linked Lists, Stack, Dynamic Arrays (Vectors), Queues
  
  Indexing: Binary Search Trees [BST], AVL (Balanced BST), Red-Black
  Trees, Splay Trees, Open Hash Tables (Closed Addressing), Closed Hash
  Table (Open Addressing), Closed Hash Tables (using buckets), B Trees, B+
  Trees

  Heap-like DS: Heaps, Min-Heap, Binomial Queues, Fibonacci Heaps, Leftist
  Heaps, Skew Heaps 

Sorting Algos: 
  Comparison Sorting: Bubble, Selection, Insertion, Shell, Merge, Quick.  
  Non-Comparison: Bucket, Counting, Radix, Heap

Graph Algos: BFS, DFS, Connected Components, Dijkstra's Shortest Path,
Prim's Minimum Cost Spanning Tree, Topological Sort, Floyd-Warshall (all
pairs shortest path), Kruska's Minimum Cost Spanning Tree

Dynamic Programming: Calculating nth Fibonacci Number, Longest Common
Subsequence

Recursion: Factorial, Reversing a String, N-Queens Probl

Geometric Algos: 2D rotation and scale matrices, 2D rotation and
translation matrices, 2D changing and coordinate systems, 3D rotation and
scale matrices, 3D changing coordinate system.  

String Matching: 

Compression/Regex: 

================
SYSTEMS/OS
================
Linux/OS: 
  Understanding system calls 
  Multithreading/Concurrency: Synchronization, Signaling, Message Passing,
  Shared Mem, Piping. 
  Device Drivers: 
  Memory Management: 
  File Systems:
  Process creation and scheduling:
  Performance Tuning: 

===============
C BIT TWIDLING 
================
MORE READING
- mmap(), mprotect(), 
- execX() series of syscalls 
- brk()/sbrk() syscalls 
- madvise()  
================



[1]
http://www.quora.com/Computer-Programming/How-do-you-keep-your-programming-skills-sharp

[2]
https://medium.com/tech-talk/d5f8051afce2 

[3]
http://bigocheatsheet.com/

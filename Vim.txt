Window Splitting
----------------
:vsp // Vertical split
:sp  // Horizontal split
:vsp <file> // Opens <file> in new window
:10sp // Specify split height
:set splitright // Opens window in right [for vertical splits] and becomes
                  active
:set splitbelow // same for horizontal window
ctrl+w <number> < // reduce width of window by <number>
ctrl+w <number> > // increase width of window by <number>
<number> ctrl+w +   // increase length of window by <number>
<number> ctrl+w -   // decrease length of window by <number>
ctrl+w | // max out window width
ctrl+w _ // max out window height
ctrl+w = // normalize all window sizes (equal sizes)
ctrl+w R // swap both windows [including buffers]

<number> ctrl+w w // switch to window <number>
ctrl+w T // make current split window in to a tab (capital T)

vim -O file1 file2 // open two files side by side

Tab Views
----------
:tabnew <file> // opens <file> in a new tab
:tabp // previous tab
:tabn // next tab

In Normal mode
gt // go to next tab
gT // go to previous tab
ngt // got to tab no. n

vim -p file1 file 2 // open multiple files in tab mode


Regular Expressions
-------------------
. (dot)	Any single character except newline
*	zero or more occurances of any character
[...]	Any single character specified in the set
[^...]	Any single character not specified in the set
^	Anchor - beginning of the line
$	Anchor - end of line
\<	Anchor - begining of word
\>	Anchor - end of word
\(...\)	Grouping - usually used to group conditions
\n	Contents of nth grouping

[...] - Set Examples
--------------------
[A-Z]	The SET from Capital A to Capital Z
[a-z]	The SET from lowercase a to lowercase z
[0-9]	The SET from 0 to 9 (All numerals)
[./=+]	The SET containing . (dot), / (slash), =, and +
[-A-F]	The SET from Capital A to Capital F and the dash (dashes must be specified first)
[0-9 A-Z]	The SET containing all capital letters and digits and a space
[A-Z][a-zA-Z]	In the first position, the SET from Capital A to Capital Z
In the second character position, the SET containing all letters

Regular Expression Examples
---------------------------
/Hello/	Matches if the line contains the value Hello
/^TEST$/	Matches if the line contains TEST by itself
/^[a-zA-Z]/	Matches if the line starts with any letter
/^[a-z].*/	Matches if the first character of the line is a-z and there is at least one more of any character following it
/2134$/	Matches if line ends with 2134
/\(21|35\)/	Matches if the line contains 21 or 35
Note the use of ( ) with the pipe symbol to specify the 'or' condition
/[0-9]*/	Matches if there are zero or more numbers in the line
/^[^#]/	        Matches if the first character is not a # in the line

Notes:
1. Regular expressions are case sensitive
2. Regular expressions are to be used where pattern is specified


Very good resource on Vim Regex
--------------------------------
http://vimregex.com/


Substituting Tips
-----------------
Save typing by using \zs and \ze to set the start and end of a pattern.
For example, instead of:

:s/Copyright 2007 All Rights Reserved/Copyright 2008 All Rights Reserved/

Use:

:s/Copyright \zs2007\ze All Rights Reserved/2008/


Diff
----
vimdiff file1 file2 // diff two files side by side


Cursor Positioning
------------
zt puts current line to top of screen
z. or zz puts current line to center of screen
zb puts current line to bottom of screen

Ref: http://unix.stackexchange.com/a/110252/45157

Code Folding
------------
Reference - :help folding
            :help za
            :help zo
            :help zc

Synopsis - Using commands here, code in a file can be temporarily folded
[hidden]. Folding helps in navigating a file quickly as parts of the file
is hidden.

zc - close a fold
zo - open a fold
za - toggle a fold [open if its closed and vice versa]

zC, zO, zA are similar but inner folding levels are also affected by them,
not just the level at which cursor is present.


Page Scroll
-----------
^d ^u   Scroll half a page down or up
^f ^b   Scroll full page up or down

Reformatting
------------
In the .vimrc file, `set textwidth=80` (or whatever column width).
gg  - go to top of file
gqG - globally set the entire file to 80 width column. It joins lines. If you
        dont want lines to be joined, have a blank one in between.
gq} - change only current paragraph
G   - go to beginning of last line
ga  - Gives ASCII value of character under cursor

Power of g command
------------------
:[range]g/pattern/command
- Above command acts on [range] (default - whole file), by executing 'cmd'
  command, for each line matching 'pattern'.

Examples:
:g/pattern/d
- Delete all lines matching 'pattern'

:g/pattern/z#.5
- Display context (5 lines) for all occurrences of a pattern.

:g/pattern/z#.5 | echo "==========="
- Same as above but with some beautification.

:g!/pattern/d
:v/pattern/d
- Do NOT delete lines matching 'pattern'

:g/^\s*$/d
- Delete all blank lines. '^' start of line, '\s*' is zero or more white
  spaces, '$' end of line.



http://vim.wikia.com/wiki/Power_of_g

Wikia Tips
----------
1. Insert line numbers in file (not just display) or a portion of file?

    http://vim.wikia.com/wiki/Insert_line_numbers

    :%s/^/\=printf("%d", line("."))   // prints current line number. Read
                                      // above link for more granularity.

Code Indentation
----------------
1. Shift+V and then up/down
2. hit =

Key Mappings
-------------
{cmd} {attr} {lhs} {rhs}

where
{cmd}  is one of ':map', ':map!', ':nmap', ':vmap', ':imap',
       <buffer>, <silent>, <expr> <script>, <unique> and
       <special>. More than one attribute can be specified to a map.
{lhs}  left hand side, is a sequence of one or more keys that are being
       mapped.
{rhs}  right hand side, is the sequence of keys that the {lhs} keys are

Ex:
nnoremap <C-Tab> <ESC>:tabnext<CR>
nnoremap <C-S-Tab> <ESC>:tabprevious<CR>

# Unmap arrow keys
no <up> <Nop>
no <down> <Nop>
no <left> <Nop>
no <right> <Nop>


Vim Tips from Youtube talks
---------------------------
1) Highlight 80th column

" Make the 81st column stand out with magenta color
highlight ColorColumn ctermbg=magenta
" Call ColorColumn on 81st column virtually.
call matchadd('ColorColumn', '\81xv', 100)

Completion tips (tags, file name etc):
-------
2)
ctrl+r --> insert text from a register
ctrl+a --> insert last inserted text (access . register)

ctrl+p --> Keyword completion. 'p' means, look back in the document
ctrl+n --> Keyword completion. 'n' mean next

ctrl+x --> puts you in a special X mode (submode of insert mode). This allows
           you to autocomplete tags using tags file.
ctrl+x ctrl+] --> completes a class name (and such tags) when pressed after
                   letter

3) Vim keeps track of Jump List: files that Vim jumped to.
ctrl+i, ctrl+o --> you can go in and out of that list

4) Filename completion:
ctrl+x, ctrl+f --> vim completes file names from current directory

5) Context aware completion
ctrl+x, ctrl+p or ctrl+n
ctrl+x, ctrl+l --> context aware line completion

6) Context aware Omni completion
ctrl+x, ctrl+o

7) Auto completion settings
:set complete
    complete=.,w,b,u,t,i
    . = look in current buffer
    w = look in split window buffer (adjacent window)
    b = Other buffers, this or other Vim tab
    u = look in unloaded buffer, not active in any window
    t = look in tags file
    i = look in inserted file





[1] https://www.youtube.com/watch?v=aHm36-na4-4
[2] https://www.youtube.com/watch?v=3TX3kV3TICU

Vim Navigation
----
L   last line of current screen
M   middle line of current screen
^e  move the screen by one line down, with cursor staying in its place
^y  move the screen up by one line

0   beginning of the line
$   end of the line
^   first non-blank character of the line
g_  last non-blank character of the line

n%  takes you to nth percent position of the file

*   search for occurance of word under cursor
#   same as *, but move in opposite direction

Q: What is a word in Vim?
- Hyphen, Exclamation, Period delianated ... stuff?

Word wise navigation:
w   small word
W   big word
e vs E
b vs B


Vim Marks
---------

`m  takes you to position where mark is set
'm  takes you to beginning of line where mark is set


Vim Scripting Language
-------
Syntax of the Language: Verb + Noun
---
d   for delete
w   for word
combine to be "delete word"

- Commands are repeatable and undoable

Verbs in Vim
---
d   Delete
c   Change (delete and enter insert mode)
>   Indent
<   Outdent
v   Visually select
y   Yank (copy)

Nouns in Vim -- Motions
---
w   word (forward by a "word")
b   back (back by a "word")
2j  down 2 lines


Nouns in Vim -- Text Objects
---
iw      "inner word" (works from anywhere in a word)
it      "inner tag" (the contents of an HTML tag)
i"      "inner quotes"
ip      "inner paragraph"
as      "a sentence"


Nouns in Vim -- Parameterized Text Objects
---
f, F    "find" the next character
t, T    "find" the next character
/,?     Search up to next match


Tips for Mastering Vim Language
-----
- The 'dot' command should be guiding rule
- Visual mode means something is wrong


File Navigation
---
set path+=**    " recursive search all files in subdirectories
                " accepts wild chars. Works like fuzzy file search
                " Use with wildmenu

:b *file        " searches for files in buffer


Tag Jumping
----
command! MakeTags !ctags -R .

- Use ^] to jump to tag under cursor
- Use g^] for ambiguous tags
- Use ^t to jump back the tag stack

Autocomplete
----
^x^n    for just this file
^x^f    for file names
^x^]    tags only
^x^d    definition (in Vim's dictionary)
^x^i    Keywords
^x^l    Lines (useful while writing Markdown)
^x^t    Thesaurus (Needs an input file)
^x^k    Dictionary
^x^s    Spelling
^x^v    Vim commands
^n      for anything specified by complete option

^n and ^p   go back and forth in suggestion list

Read docs at |ins-completion|


Intermediate Vim [5]
===
- Most commands are composed of an action and a motion
    * Actions do something
    * Motions move the cursor

- Uncommon Motions
    * Text objects: w, s, p, b, B, etc
        * Pneumonic?
            + "a word" -> aw
            + "inner block" -> ib
    * Last position in change list: g; (g, is go back)

Copy & Paste
---
- Forget Copy/Paste and think Registers
- You now have 35 copy buffers/registers
"+ is X server (i.e system) copy/paste register, copy to here to copy out of Vim
:reg    view content of registers
<C-r> in insert mode puts the register


Common Registers
---
"[1-9] history registers (or delete registers. It acts like a Queue)
"0 the yank register
"[a-z] are named registers
"[A-Z] samd as "[a-z] but append


Important Registers
---
"/  current search pattern
"-  small delete
"=  expression register
"_  the black hole register


Read-Only Registers
---
":  last :command
".  last inserted text
"%  filename of current buffer
"#  filename of alternate file (last file you edited)
:h registers

Undo and Redo Trees
---


Macros
---
- Recording a Macros starts by hitting q and then a letter, then sequence of
actions are recorded in that register.
- Hit q again to stop recording
- @<register-alphabet> will replay the macros actions


Windows
---
:h windows
- Lots of commands/help


Digraphs & Special Characters
---
- Digraphs: insert weird chars like: é,ä,etc
- In insert mode, ^k followed by one or two chars
:h digraphs


Templates
---
0r ~/path/to/template   << this puts entire template in to this file


Snippets
---
:ab list of abbreviations
- Ultisnips and Snipmate: provide better snippets support and advance features


Notes from [6, 7]
---
Vim Concepts
---
- Modal Editing: Normal, Insert, Visual, Ex (or Command) modes

Scrolling
---
^E      Scroll window down
^Y      Scroll window up
^F      Scroll down one page
^B      Scroll up one page
H       Move cursor to top of window
M       Move cursor to middle of window
L       Move cursor to bottom of window


text-objects
---
w       word
s       sentence
p       paragraph
t       tags as in XML/HTML files


Motions: Getting from a to b
---
word = Any set of alphanumeric chars. Does not include commas, period etc
WORD - Chars separated by whitespace (or the like)

Basics: wWbBeE
w       Forward to beginning of next word
W       Forward to beginning of next WORD
b       Backwards to beginning of next word
B       Backwards to beginning of next WORD
e       Forward to next end of word
E       Forward to next end of WORD
0       Zeroth char of the line
^       First non-blank char of line
$       Last char of line


Slightly less basic: fFtT
All follow: [number]<verb><noun> syntax
[n]f<o>     Forward until (nth) (o) Inclusive
[n]F<o>     Backward until (nth) (o) Inclusive
[n]t<o>     Forward until (nth) (o) Exclusive
[n]T<o>     Backward until (nth) (o) Exclusive


Searching
/   Forward
?   Backward
*   Word under cursor - Forward search (bounded)
g*  Word under cursor - Forward search (unbounded)
#   Word under cursor - Backward search (bounded)
g#  Word under cursor - Backward search (unbounded)

Motions
---
a       all
i       in
t       until
f       find
F       Find backwards

Commands
---
d       delete
c       change (delete + insert mode)
y       yank (copy)
v       visually select

[number]{command}{text object | motion}

// TODO: Below commands are 'repeatable', meaning you can use DOT command to
// repeat what they do

diw
daw
ca[     change everything including []
ci]     change everything inside []
ca      << there's space after 'a'
va"     visually select everything including "


Basic Insert Mode Operations
---
i   Enter insert mode at cursor
I   Enter insert mode at first non-blank char
s   Delete char under cursor and enter insert mode
S   Delete line and insert mode at beginning of same line
a   Enter insert mode _after_ cursor
A   Enter insert mode at end of line
o   Enter insert mode on next line
O   Enter insert mode above line
C   Delete from cursor to end of line and enter insert mode


==========   Ten Things You Don't Know About Vim [8]    ====================
In .vimrc, do following
set nocompatible    " not compatible with vi
filetype off

1) Help System. Very extensive
:help i_CTRL-V      " tells what CTRL-V does in insert mode
:help :help         " help about help
:help text-objects  " help about concepts 'text-objects'
:help gU            " help about key strokes
:help 'compatible'  " options
:help submatch()    " Vimscript functions
:help surround      " help about plugins after installing

- Vim is Upside-Down vs GUI editor. In Vim, action comes first and object next
    * [number]<verb><object> or [number]<verb><adverb><object>
    * Ex: diw, yw, c$

- Visual Mode is somewhat similar to GUI
    * Select object first and perform operation.

- Example. verb -> gU (change to Uppercase)
           object -> char, word or line

2) Visual Block Mode
- CTRL-V puts vim into Visual Block mode


3) Text-Object
- aw or iw: around word, inner word
- All text-objects start with a (around) or i (inner)
- Around includes whitespace or things like that with object of your interest
- Inner is just the object
- word, sentence (ending with .), paragraph

4) Registers
- Put something in a register
    "<alphabet><operation>
- Play something from a register
    @<register>

5) Macros
- Record operations in to a register and repeatedly apply them
q 	start recording
a	record in to register a
<do your operations>
q	end recording

- But typing entire operation on a line and saving them into a register is more
  convenient.

- Suppose, at 36.48 in [1], user has list of names. He want's to number them and
  add ; at the end. They can type this on a line

A; I =b:i
)  l~j:let b:i+=1

6) Shell output in to Vim directly
:4,8!<shell cmd>
- Result of shell command is pasted in lines 4,8

7) Advanced search & replace
set hlsearch    " highlight search
set incsearch   " find as you type

- Search history by q/


8) Regular Exp in search
- Vim's regex is very bad
- Instead use "magic v"

/\v<regex>
- Now regex behaves like Perl regex

9) Browse vimrc session from within vim and live update settings and save it
using :mksession <session-name>.vim

- Later on, load that session using :source <session-name>.vim

10) Open an HTTPS file using :edit https://github.com/umbs/dotfiles/vimrc

11) You can edit a tar.gz file "live" from within Vim

=======================

Vim important links

[1] https://raw.github.com/shawncplus/vim-classes/master/expert-1.md
[2] https://raw.github.com/shawncplus/vim-classes/master/expert-2.md


.vim/
  - after/
  - autoload/
  - bundle/ <<< when using Pathogen/Vundle etc
  - colors/
  - plugins/
  - syntax/

=============     Standard   Plugins  ==========
- AKA Global Plugins
- :help usr_05.txt (or :help standard-plugin)
- :help standar-plugin-list will list all of them



=============     Autocommands     =============
- Run commands automatically, as trigger to certain events such as file
  save/write etc.
- :help usr_40.txt
- :help autocmd.txt
- Syntax
    autocmd [group] {events} {file_pattern} [nested] {command}

- :help autocmd-events

// This is very extensive documentation. Read up for more info.


[1] https://www.youtube.com/watch?v=aHm36-na4-4
[2] https://www.youtube.com/watch?v=Qem8cpbJeYc
[3] https://www.youtube.com/watch?v=wlR5gYd6um0
[4] https://www.youtube.com/watch?v=XA2WjJbmmoM
[5] https://www.youtube.com/watch?v=v0W7JkzQAzA
[6] https://www.youtube.com/watch?v=5r6yzFEXajQ
[7] https://www.youtube.com/watch?v=Nim4_f5QUxA << basic Vim stuff
[8] Ten Things You Don't Know About Vim
https://www.youtube.com/watch?v=ZtfSm8nK1ag
[9]

Notes from [1]

Socket descriptor type: int 

struct addrinfo {
    int              ai_flags;     // AI_PASSIVE, AI_CANONNAME, etc.
    int              ai_family;    // AF_INET, AF_INET6, AF_UNSPEC
    int              ai_socktype;  // SOCK_STREAM, SOCK_DGRAM
    int              ai_protocol;  // use 0 for "any"
    size_t           ai_addrlen;   // size of ai_addr in bytes
    struct sockaddr *ai_addr;      // struct sockaddr_in or _in6
    char            *ai_canonname; // full canonical hostname

    struct addrinfo *ai_next;      // linked list, next node
};

struct sockaddr {
    unsigned short    sa_family;    // address family, AF_xxx
    char              sa_data[14];  // 14 bytes of protocol address
}; 

- sa_data contains destination IP and port number and is not easy to use. So,
  sockaddr_in is created to use interchangeably with sockaddr 

// (IPv4 only--see struct sockaddr_in6 for IPv6)
struct sockaddr_in {
    short int          sin_family;  // Address family, AF_INET
    unsigned short int sin_port;    // Port number
    struct in_addr     sin_addr;    // IP addr 
    unsigned char      sin_zero[8]; // Same size as struct sockaddr
};

- sin_zero is zero'd out. Its only used as padding to match sockaddr size. 
- sin_family in sockaddr_in corresponds to sa_family in sockaddr 


// (IPv4 only--see struct in6_addr for IPv6)

// Internet address (a structure for historical reasons)
struct in_addr {
    uint32_t s_addr; // that's a 32-bit int (4 bytes)
};

- Now for below variable, accessing IP address is: 
  struct sockaddr_in ina; 
  ina.sin_addr.s_addr; 


// (IPv6 only--see struct sockaddr_in and struct in_addr for IPv4)

struct sockaddr_in6 {
    u_int16_t       sin6_family;   // address family, AF_INET6
    u_int16_t       sin6_port;     // port number, Network Byte Order
    u_int32_t       sin6_flowinfo; // IPv6 flow information
    struct in6_addr sin6_addr;     // IPv6 address
    u_int32_t       sin6_scope_id; // Scope ID
};

struct in6_addr {
    unsigned char   s6_addr[16];   // IPv6 address
};




SYSTEM CALLS
-------

/* hints = structure that we fill out
 * node = host name or IP 
 * service = Port number or any service such as http, ftp, telnet etc 
 * res = pointer to linked list of results 
 */ 
int getaddrinfo(const char *node,     // e.g. "www.example.com" or IP
                const char *service,  // e.g. "http" or port number
                const struct addrinfo *hints,
                struct addrinfo **res);


 

UTILITY FUNCTIONS
-------
inet_ntop() 
inet_pton() 

Reference: 
[1] http://www.beej.us/guide/bgnet/

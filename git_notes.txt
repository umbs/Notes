Git Commands
------------
How to backout all changes committed to local repo but not yet pushed to
remote? 
  git fetch 
  git reset --hard origin/master 

Forgot to commit local changes and checked out [or merged] another branch. How 
do I get back older changes?
  git reset --merge 

Revert single uncommitted file 
  git checkout filename  # this is also used to checkout branches. If
                         # filename is same as branch, this doesn't work
  git checkout -- filename # is preferred 

Revert changes made to working copy. 
  git checkout -- .

Revert changes made to index (added files) 
  git reset 

Revert changes that are committed. 
  git revert .. 

 
Staging: 
--------
Addition: 
# git add file 
# git add . 

Removal of a file: 
# git rm file 

Rename: 
# git mv old new 

Ignore files: 
# put them in .gitignore 

Committing: 
# git commit -a -m "some comment" 
  ! will create a commit of ALL [if -a is used] or only staged items 
  ! Without `-a`, git will only commit what is in the index meaning all 
  ! the files that git is tracking. It will not contain new files and 
  ! files that have been removed but not told to git. 



Bootstrapping 
-------------
# mkdir project 
# cd project 
# git init 

Repo Status
------------
# git status 

Diffs 
-----
# git diff 
   ! changes between index/staging and working files 

# git diff --staged 
   ! changes between HEAD and index/staging 
   ! `git diff --cached` also does the same thing. `staged` and `cached`
   ! can be used interchangeably. 

# git diff HEAD 
   ! changes between HEAD and working files 

# git diff $commit $commit 
   ! changes between 2 commits 

# git diff origin 
   ! diff between HEAD & remote/origin 

Shows
-----
# git show 
# git show --stat   
    ! a bit more brief 
# git show --name-status 
    ! SVN like output: Add, Delete, Modified etc 
# git show HEAD 
# git show HEAD^^^ 
    ! prior to 3 commits
# git show master ~10 
    ! prior to 10 commits
# git show master@{May.16}
    ! Master branch on May 16th 
# git show HEAD:file 
    ! show contents of a file 


Searching [git grep is 10% faster than grep]
---------
# git grep -e "pattern" file 

# git grep -e "pattern" branch  

References
----------
# git branch -l 
   ! shows all the local branches 

# git tag -l 
   ! shows all local tags 

# git branch -r 
   ! remote branches 


Create a branch 
---------------
# git branch name <commit>
   ! new branch "name" on HEAD or point to a specified commit 

# git checkout -f name 
   ! check out files from branch "name" by switching to that branch 
   ! optionally, force overwriting changed files 

# git checkout -b name <commit> 
   ! create a new branch and switch to it. Two operations in one 
   ! command. Optionally, specify a commit to which the new branch 
   ! should point to.  

# git checkout name
   ! if there are changes in local branch which is not committed yet
   ! then switch to "name" will throw error. 

# git checkout -m name 
   ! merge outstanding diff/changes on to branch "name". This can result 
   ! in conflict 


Merging
-------
# git merge branch1 branch2 ...

Rebasing
--------
# git rebase branch 

! Undoing a rebase 


Remotes 
-------
# git clone <remote> 
   ! brings in changes from remote and populates local one. 

# git fetch 
   ! 

Git is slow
-----------
# git gc 
   ! Run git garbage collection

Questions: 
-----------
+ git has become slow. `git branch` etc are taking long time to respond. 
    Run git garbage collection. 
        git gc
  

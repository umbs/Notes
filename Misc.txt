// Notes on all other technical stuff I learn.


@@@@@@@@@@@@@@@@@@@@@      PROGRAMMING       @@@@@@@@@@@@@@@@@@@@@@@@@@

Rob Pike's 5 Rules of Programming

Rule 1. You can't tell where a program is going to spend its time. Bottlenecks
        occur in surprising places, so don't try to second guess and put in a
        speed hack until you've proven that's where the bottleneck is.

Rule 2. Measure. Don't tune for speed until you've measured, and even then
        don't unless one part of the code overwhelms the rest.

Rule 3. Fancy algorithms are slow when n is small, and n is usually small.
        Fancy algorithms have big constants. Until you know that n is
        frequently going to be big, don't get fancy. (Even if n does get big,
        use Rule 2 first.)

Rule 4. Fancy algorithms are buggier than simple ones, and they're much harder
        to implement. Use simple algorithms as well as simple data structures.

Rule 5. Data dominates. If you've chosen the right data structures and
        organized things well, the algorithms will almost always be
        self-evident. Data structures, not algorithms, are central to
        programming.

Pike's rules 1 and 2 restate Tony Hoare's famous maxim "Premature optimization
is the root of all evil."

Ken Thompson rephrased Pike's rules 3 and 4 as "When in doubt, use brute
force.".

Rules 3 and 4 are instances of the design philosophy KISS.

Rule 5 was previously stated by Fred Brooks in The Mythical Man-Month. Rule 5 is
often shortened to "write stupid code that uses smart objects".

Reference:
http://users.ece.utexas.edu/~adnan/pike.html

@@@@@@@@@@   Miscellaneous  Software   Questions/Topics    @@@@@@@@@@@
# These Q's are for general understanding of various concepts

- Why do string objects in Java/Python immutable?
    *

@@@@@@@@@@   VLC Media Player Shortcut Keys  @@@@@@@@@@@

Very short backwards jump: Shift + Left
Very short forward jump: Shift + Right
Short backwards jump: Alt + Left (or just Left)
Short forward jump: Alt + Right (or just Right)
Medium backwards jump: CTRL + left
Medium forward jump: CTRL + Right

@@@@@@@@@@@@@@@@@@@   QEMU    NOTES      @@@@@@@@@@@@@@@@@@

// Basic qemu tutorial
https://fosspost.org/tutorials/use-qemu-test-operating-systems-distributions

// On Windows, download Intel's Hardware Acceleration (HAX) technology
www.qemu.org/2017/11/22/haxm-usage-windows/

// pre-built qcow2 images
https://people.debian.org/~aurel32/qemu/amd64/

// To start an image
qemu-system-x86_64 -drive format=raw,file=debian-8.2.0-amd64-DVD-1.iso

For me, following steps worked:
1. Download qemu
2. Download HAX
3. Run above command


@@@@@@@@@@@@@@@@@@@   NODEJS  NOTES      @@@@@@@@@@@@@@@@@@

Reading/Learning NodeJS
=====
- Use of 'var' and 'const'
- global object, modules
- Module wrapper function:
    * All code is wrapped inside this wrapper
        (function (exports, require, module, __filename__, __dirname__) {
            /* your code */
        })

- Template strings (Javascript concept - ES6)

Events and Signals
==================
- Look at this code:
    const EE = require('events');   // events class.
    const em = new EE();
    * here EE is a CLASS and not an object of a class, a method or a variable
    * therefore, em is an instance of EE() class
    em.emit("signalEvent", {id: 1, url: 'http://'});

- A listener must listen to above event
    em.on('signalEvent', function(eventArg) {
        console.log('signalEvent invoked. Listener called', eventArg);
    })

- Arrow functions
    em.on('signalEvent', (eventArg) => {
        console.log('signalEvent invoked. Listener called', eventArg);
    })


Reference:
[1] https://www.youtube.com/watch?v=TlB_eWDSMt4

@@@@@@@@@@@@@@@@@@@@   GCP SDK Commands Cheatsheet   @@@@@@@@@@@@@@@@@@@@@@@@
Deploy your app
	$ gcloud app deploy

List gcloud configurations
	$ gcloud list

You can stream logs from the command line by running
	$ gcloud app logs tail -s default

To view your application in the web browser run
	$ gcloud app browse

gcloud functions deploy  helloGCSGeneric --runtime nodejs6 --trigger-resource gcs-cf-nodejs --trigger-event google.storage.object.finalize



[1] https://gist.github.com/pydevops/cffbd3c694d599c6ca18342d3625af97
[2] https://github.com/gregsramblings/google-cloud-4-words

@@@@@@@@@@@@@@   GCP Functions Emulator Commands Cheatsheet   @@@@@@@@@@@@@@@@@
// prefix below commands with `gcloud` and you can do everything with gcloud SDK
// instead of function emulators

$ functions --help
$ functions <command> --help

$ functions config set projectId PROJECT_ID
$ functions start

$ functions deploy helloGET --trigger-http
$ functions call helloGET
$ functions call helloGreeting --data '{"name":"Local Emulator"}'

$ functions debug <function-name>
$ functions inspect <function-name>

$ functions delete FUNCTION_NAME
$ functions reset FUNCTION_NAME

$ functions list
$ functions logs read
$ functions logs clear
$ functions status  << status of log file

$ functions stop
$ functions kill

@@@@@@@@@@@@@@@@@@@   RabbitMQ  vs  Apache Kafka  @@@@@@@@@@@@@@@@@@

Origins:
========
RMQ is a message broker and first mature open source implementation of AMQP.
It's written in Erlang.  AMQP is an "Open Wire Protocol" for messaging with
powerful routing features. While language specific message brokers existed, AMQP
was first cross-language protocol and RMQ its most mature implementation.

Kafka came from LinkedIn, written in Scala and solved the problem to connect
different internal systems. Adopted by Apache SF and useful in event-driven
architecture.


Architecture & Design
=====================
RMQ is a general purpose message broker. A broker in RMQ comprises of two
components: Exchange and Queues
- Exchange takes messages from Producer and maps it to Queues
- Consumer reads messages from Queues

This way, Producer and Consumer are decoupled. Messaging can be synchronous or
asynchronous as required. RMQ uses smart broker/dumb consumer model.


                                      +---------+
                                +---->| Queue   |---------> Consumer
                                |     +---------+
                                |
                                |C
                +-----------+   |
            A   |           |   |     +----------+
Producer -------> Exchange  |-------->| Queue    |--------> Consumer
                |    B      |   |     +----------+
                +-----------+   |
                                |
                                |     +----------+
                                +---->| Queue    |--------> Consumer
                                      +----------+

            A = Message + Routing Key
            B = Exchange Types (4 types)
            C = Binding + Binding Key. Binding is mapping Exchange with Queue


There are 4 types of exchanges: Direct, Topic, Fanout, Headers

There's also a default (nameless) exchange where routing key is compared with
queue name


Exchange uses "routing keys" to "bind" queues to message. A routing key is
generated for a message and used to determine which queue(s) it must be
forwarded to

Direct Exchange: 1:1 mapping between message and queue.
        Routing Key == Binding Key

Fanout: Every message is routed to ALL queues
Topic: Routing Key is partially matched to Binding Key. Not clear how it's done.
Header: There's no routing key. Message header is used in Queue matching

Messages are removed from the queue after Consumer reads it.

RMQ can be setup on multi-node cluster and make it distributed deployment (HA
etc).



Apache Kafka is not a message broker but more like a message "store" or message
"log". It is fundamentally different in implementation (distributed). Kafka uses
Zookeeper to implement and manage all distributed concepts (leader election,
config management, replication state management etc)

Kafka uses dumb broker/smart consumer model in the sense that consumer is
responsible for maintaining message offsets.

Topics and Partitions:
---
Kafka uses topics and partitions within the topics that acts similar to RMQ
queue. A topic can have many partitions. Ordering of messages within a partition
is FIFO.

Consumer Groups:
---
Kafka has concept of Consumer Groups, where a bunch of Consumer nodes are
grouped together (duh!). This is used to expand and reduce based on message flow
in partitions. There is 1:1 mapping of partition and consumer node. There cannot
be two consumer nodes from same consumer group reading from same partition.
Offset maintenance will be a problem. Offsets per partition are maintained per
consumer group.


Requirements and Use Cases
==========================
TBD

Security
========
TBD

Developer Experience
====================
TBD

Performance
===========
TBD

Making the Call
===============
TBD


Reference:
[1]
https://content.pivotal.io/blog/understanding-when-to-use-rabbitmq-or-apache-kafka
[2] https://www.opsclarity.com/understanding-kafka-consumer-lag/

@@@@@@@@@@@@@@@@@@@   SOAP     vs    REST         @@@@@@@@@@@@@@@@@@
SOAP = Simple Object Access Protocol
REST = Representational State Transfer

- Both are communication protocol for web services

- REST is a stateless protocol and operates through interfaces called resources
  (or APIs).
- SOAP exposes application logic as services rather than data.


Benefits of REST over SOAP:
- REST uses HTTP to communicate with APIs. Much simpler protocol than SOAP's
  messaging protocols
- REST allows variety of data formats (JSON, YAML). SOAP only uses XML
- REST offers better support for browser clients and has superior performance
- Uses less bandwidth


Benefits of SOAP over REST
-

Reference:
[1] https://stackify.com/soap-vs-rest/

@@@@@@@@@@@@@@@@@@@   ELASTIC    SEARCH   NOTES   @@@@@@@@@@@@@@@@@@
- ES is a document datastore. Documents are stored in JSON format.
- ES uses indices to track documents. We say "Document is added to index XXX"
- Documents also have a type.

Example: Adding a document to ES
----

ADD DOCUMENT TO ES:

POST localhost:9200/accounts/person/1
{
    "name" : "John",
    "lastname" : "Doe",
    "job_description" : "Systems administrator and Linux specialit"
}

index = 'accounts'
document type = 'person'
id = 1
Content of the document is the JSON

Return to above HTTP POST will confirm document creation, as follows:

{
    "_index": "accounts",
    "_type": "person",
    "_id": "1",
    "_version": 1,
    "result": "created",
    "_shards": {
        total": 2,
        "successful": 1,
        "failed": 0
    },
    "created": true
}


- Let's get the same document back



READ DOCUMENT FROM ES:

GET localhost:9200/accounts/person/1

Response:
---
{
    "_index": "accounts",
    "_type": "person",
    "_id": "1",
    "_version": 1,
    "found": true,
    "_source": {
        "name": "John",
        "lastname": "Doe",
        "job_description": "Systems administrator and Linux specialit"
    }
}

- Look at "_source" for your document

UPDATE THE DOCUMENT:

POST localhost:9200/accounts/person/1/_update
{
      "doc":{
       "job_description" : "Systems administrator and Linux specialist"
     }
}

- Notice that 'specialit' was incorrectly spelled. That is updated now.


SEARCH DOCUMENTS:

GET localhost:9200/_search?q=john




References:
[1] https://www.elastic.co/blog/a-practical-introduction-to-elasticsearch


@@@@@@@@@@@@@@@@@@@   UTF-8  INTRODUCTION     @@@@@@@@@@@@@@@@@@@@@@
- Variable sized encoding. Size range from 1 to 4 bytes

How are characters encoded in UTF-8?
- Manipulating numbers at binary level
- High order bits of first byte are important. They tell how many bytes are
  used to encode a value

- In 1 byte encoding, which range from 0 to 127, high order bit will always be
  zero

        +---------------------------+
        | 0 |                       |
        +---------------------------+

- In 2 byte encoding, first 3 high order bits of first byte is 110 and first 2
  high order bits of second byte is 10

    +---------------------------+
    | 1 | 1 | 0 |               |
    +---------------------------+
    +---------------------------+
    | 1 | 0 |                   |
    +---------------------------+

- This gives 11 (5+6) bits to encode the char

- In 3 byte encoding, we have 1110, 10 and 10 in higher order of each byte

    +---------------------------+
    | 1 | 1 | 1 | 0 |           |
    +---------------------------+
    +---------------------------+
    | 1 | 0 |                   |
    +---------------------------+
    +---------------------------+
    | 1 | 0 |                   |
    +---------------------------+

- This gives 16 bits (4+6+6) to work with

- 4 byte encoding follows same pattern as 3 byte encoding

    +---------------------------+
    | 1 | 1 | 1 | 0 |           |
    +---------------------------+
    +---------------------------+
    | 1 | 0 |                   |
    +---------------------------+
    +---------------------------+
    | 1 | 0 |                   |
    +---------------------------+
    +---------------------------+
    | 1 | 0 |                   |
    +---------------------------+

- Total of 21 chars to work with


Reference
https://www.youtube.com/watch?v=sqPTR_v4qFA


@@@@@@@@@@@@@@@   CPU    CACHES      @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
- Three common types of caches
    * Data Cache (D-cache, aka D$)
    * Instruction (I-cache, aka I$)
    * Translation Lookaside Buffer (TLB)
        - Caches virtual addr to real addr

- Cache Hierarchies (per core)
    * L1 I-cache, L1 D-cache
    * L2 cache
        - Holds both instructions and data
    * L3 cache
        - Holds both instructions and data

- Assume 100MB program at runtime (code+data)
    * 8% fits in L3 cache of Intel Core i79xx
    * 0.25% fits in each L2 cache
    * 0.03% fits in each L1 cache

- Cache speeds (for Core i79xx)
    * L1 latency is 4 cpu cycles
    * L2 latency is 11 cpu cycles
    * L3 latency is 39 cpu cycles
    * Main Memory (RAM) is 107 cpu cycles

Cache Lines
---
- Caches consists of "lines", each holding multiple adjacent words
- On Core i7, cache lines hold 64 bytes (common for Intel/AMD processors)
    64 bytes = 16 32-bit values, 8 64-bit values, etc
        Eg., 16 32-bit array elements

- Main memory read/written in terms of cache lines
    * Reading a byte that's not in cache (cache miss) will read a full cache
      line from main memory
    * Writing a byte will write a full cache line to main memory (eventually)



Reference:
https://www.youtube.com/watch?v=WDIkqP4JbkE

@@@@@@@@@@@@     YAML   SYNTAX   RULES       @@@@@@@@@@@@@@@@@@@@@@@@

RULE 0: Indentation
- YAML uses fixed indentation scheme to represent relationship between data
  layers

RULE 1: Scalars
- Scalars are ordinary values: numbers, strings, booleans

Ex:
number-value: 42
floating-point-value: 3.141592
boolean-value: true
# strings can be both 'single-quoted` and "double-quoted"
string-value: 'Bonjour'



RULE 2: Colons (or Dictionaries)
- YAML uses dictionaries represented as key:value pairs, similar to Python
  dictionaries

Ex:
[1]
my_key: my_value

[2] Uncommon, but this is valid
my_key:
  my_value


- Dictionaries can be nested
Ex:
first_level_dict_key:
  second_level_dict_key: value_in_second_level_dict

- There's a space following colon and then value (this is mandatory)


RULE 3: Dashes (or Lists)
- To represent list of items, single dash followed by a space is used.
- Multiple items belong to same list if indentation level is same.

Ex:
- list_value_one
- list_value_two
- list_value_three


- Value of a dictionary can be list

Ex:

my_dictionary:
  - list_value_one
  - list_value_two
  - list_value_three


YAML Mutli Documents
---
- YAML allows multiple docs to be embedded in a single file. They only have to
  be separated using triple-dash separator (---)

Reference:
https://learnxinyminutes.com/docs/yaml/  <<<< This is very good, quick intro
https://docs.saltstack.com/en/latest/topics/yaml/
https://gettaurus.org/docs/YAMLTutorial/


@@@@@@@@@@@@@@@@@@@@@@@@@     TOR    @@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@@
Tor:
- Passing traffic by bouncing them across various Tor nodes across the globe.
  Minimum, Tor traffic passes through 3 nodes: Entry/Gaurd, Relay & Exit.

- Traffic is encrypted in layers (like Onion) before it is sent out from source.
    # of layers of encryption = # of Tor nodes traffic is passing.

- As traffic passes through each node, that node knows how to decrypt it's layer
  and forward to next Tor node.


@@@@@@@@    MUNICIPAL SOLID WASTE MANAGEMENT IN DEVELOPING COUNTRIES @@@@@@@@

Facts:
- Humans generate 7-10 billion tons of waste per year worldwide.
- Waste from 2 billion people is not collected from their homes and
  neighborhoods.
- By end of century, 83% of world population will be in Asia and Africa.
- There are 3 billion people who lack access to controlled disposal facilities.
- By 2030 there will be 40 megacities (cities with 10 million or more
  population). Of that 32 will be in Asia and Africa.


Municipal Waste Generation and Characterization:
- Estimating Lower Calorific Value (LCV)
    LCV = 40(a+b+c+d) + 90e - 46W
    LCV in kcal/kg
    a = Paper
    b = Textiles
    c = Wood and leaves
    d = Food waste
    e = Plastic and rubber
    W = Water
    all of above in % of wet weight.

- Incineration without adding fuel requies LCV > 1000 kcal/kg
- Incineration with energy recovery requires LCV > 1500-1650 kcal/kg


[1]
https://www.coursera.org/learn/solid-waste-management/home/welcome

@@@@@@@@@@@@@   Open/R  @@@@@@@@@@@@@@

- Build a routing _platform_ and not a routing _protocol_
- Applications are built on top of this platform in C++. Routing is one
  application.
- Each node in this network as following 4 components:
    * Decision
    * FIB
    * KV-Store
    * Link Monitor
- Zero MQ for message passing between nodes.
- Thrift: Message encoding. Populat open source library.

- Key-Value Store:
    - Key = Strings, Value = Thrift objects

Optimization in KV Store:
- Group nodes in to clusters
- STP within clusters
- Between clusters, similar to BGP's path tracing mechanism is used.

Scaling in KV Store:
-

Neighbor Discovery:
- Runs as a separate process.
- Works on link-level




[1]
https://code.facebook.com/posts/1036362693099725/networking-scale-may-2016-recap/

[2]
https://code.facebook.com/posts/1142111519143652/introducing-open-r-a-new-modular-routing-platform/


@@@@@@@@@@@@@   Networks Illustrated: Principles w/o Calculus @@@@@@@@@@@@@@

Lesson 1:
---
- 8 principles in this course:
- Sharing (network medium) is hard
- Consensus is hard
    * Referral system.
    * Auction system with systems bidding.
    * Voting system.
- Crowds are wise
    * Amazon trying to solve Rating problem.
    * Netflix trying to solve Recommendation problem.

- Crowds are NOT wise:
    * Information cascade can happen and crowds may not think for themselves.

- Network is Expensive:
- Network of Networks:
    * internet is combination of many networks within networks.

- Layers on Layers:
- Bigger & Bigger:


Lesson 2:
---
- Mobile penetration rate:
    # of mobile subscriptions/total population

- Multiple Access
    * Morse devised Morse Code to use Telegraph Cable to transmit ./- notation.
    * Bell devised multiple transmitters and recievers on same Telegraph Cable.

- Frequency Division Multiple Access (FDMA)
    * N MHz = N cycles per second.

- 0G
    MTS (1946) - Mobile Telephone System
        * FDMA system
        * An operator was required
    IMTS (1964) - Improved MTS
        * No operator required
    DynaTAC (1973)
        * From Qualcomm

- Attenuation
    WiFi is in unlicensed frequency
    Cellular is in licensed frequency
    Attenuation is decaying of signal over distance

- Cell & 1G
    + Due to attenuation, we divided regions in to cells of hexagon shape.
    + Cell towers are at the center of hexagons and base stations at
      intersection of edges of hexagons. With this design, a base station can
      serve 3 cells.
    + Frequency ranges in one cell doesn't match with next cell to avoid
      interference, but they can match with non-adjacent cells. This is done for
      spectral efficiency.

- Frequency Reuse Factor
    + Number of frequency bands used.

- 1G
    + Cells were used first time in 1G.
    + AMPS (1986) - Advanced Mobile Phone System. Operated in 800 MHz band
      system.
    + Cellular technology transformed from 0G to 1G.
    + First operated in Chicago with 90 people and 10 cells. Demonstrated
      feasibility.

- 2G
    + Migration from Analog to Digital is the most significant change from 1G to
      2G
    + Digital screens started appearing.
    + Texting was a feature.
    + 2000 was the year when 2G came.

- TDMA (Time Division)
    + TDMA uses Frequency Division with Time Division.
    + Why didn't we do this before? Analog signalling didn't allow this.
    + Sometimes called F/TDMA.

- GSM (Global System for Mobile Communication) 1982
    + First system to employ TDMA
    + 3x more than Analog capacity.
    + GSM was quickly adopted by Europe.

- CDMA (Code Division Multiple Access) 1988
    + CTIA (Cellular Technology Industries Assoc) wanted 10x improvement.
    + Qualcomm had a different idea. They added a different dimension to time
      and frequency. A code is added with each communication.

- Codes?
    + Along with digital data signal, a "spreading code" is used to transmit
      data. data signal x spreading code is transmitted.
    + Receiver uses spreading code to decode data signal.
    + Designing spreading code is very tough.
    + It needs to have a property called "Orthogonal" that two spreading codes
      should cancel out.

- Qualcomm's CDMA improvements
    + Supposedly 40x improvement (theoretically). But in reality, much less.
    + CTIA voted Qualcomm's CDMA as a 2G standard in US.

- Near-Far Problem
    + Channel quality depends on distance from base station and obstacles in
      between.
    + How much power is needed to transmit data? It's measure in Watts (W). In
      fact, phones need power in milli Watts (mW) to transmit data.
    + Phones that are farther from BS transmit data at, say, 20 mW and by the
      time it reaches BS, it's say 2 mW. While those near to BS may be received
      at 10 mW. It is important to make these signals reach BS at constant
      power. There's easy algo for this.
    + BS tells phones at what power to transmit so it receives at constant
      power.
    + Transmit Power Control (TCP) Algorithm to solve NF Problem.

- Signal Quality
    + Power is not the problem. Quality is.
    + Increasing power by a phone causes interference.
    + Signal to Interference Ratio (SIR).

- DPC (Distributed Power Control)
    + Cells transmit data to BS. BS sends SIR to phones. Phones adjust power.
    + This process iterates and finally converges on a power.




[1] https://www.coursera.org/learn/networks-illustrated/home


@@@@@@@@@@@@@@@@@@@@@@@   C++ for C Programmers    @@@@@@@@@@@@@@@@@@@@@@@@

- static_cast <new_type> (expression), dynamic_cast <new_type> (expression)
  const_cast <new_type> (exp), reinterpret_cast <new_type> (exp)

C++ is better than C (really?)
---
    + More type safe
    + More libraries
    + Less reliance on preprocessor
    + OO vs imperative

C++ Templates
---
    template <class T>
    inline void swap (T& d, T& s)
    {   T temp = s;
        s = d;
        d = temp;
    }

C++ Generics: Sum an array
---

template <class T>  //T is a generic type
T sum (const T data[], int size, T s=0)
{
    for (int i=0; i<size; i++)
        s += data[i]; // += must work for T

    return s;
}

- Defaults for function parameter in C++ must be at the end of the param list.
- When multiple default params exists, in a function call, values are assigned
  left to right.
        void func(int x=10, int y=20, int z=30);
        func(1, 2, 3);  // x=1, y=2, z=3
        func(1, 2);     // x=1, y=2, z=30
        func(1);        // x=1, y=20, z=30
        func();         // x=10, y=20, z=30


Multiple Template Arguments
---
- Be careful, as it can get very dangerous.

template <class T1, class T2>
void copy (const T1 src[], T2 dst[], int size)
{
    for (int i=0; i<size; i++) {
        dst[i] = static_cast<T2> (src[i]);
    }
}

- static_cast<> This is safe casting.

C++ casts
---
- 4 types of casting in C++
    + static_cast <type>    // considered safe
    + dynamic_cast <type>   // used with classes
    + reinterpret_cast <type>   // highly unsafe, similar to C
    + const_cast <type>     // cast away const-ness

    reinterpret_cast and const_cast are usually discouraged by instructor.

Representation of Graph
---
- Edge list representation
- Connectivity matrix (also distances).


List representation:
---
- Representation of directed graph with n verticies using an array of n lists of
  vertices.
- List i contains vertex of j if there is an edge from vertex i to vertex j.
- A weighted graph may be represented with a list of vertex/weight pairs.
- An undirected graph may be represented by having vertex j in the list for
  vertex i and vertex i in the list for vertex j.

Matrix Representation:
---
- Well known.

- Both these don't capture weight.


Dijkstra Shortest Path
---
TODO: Watch Prof. Bob Sedgwick's video.


Enum
---
typedef enum color {
    RED,
    WHITE,
    GREEN,
} color;

- enum is of type int.
- Unary operators can be overloaded. Their precedence cannot be overriden.


Operator Overloading
---

- Example of overloading ++ operator

typedef enum days {
    SUN,
    MON,
    TUE,
    WED,
    THU,
    FRI,
    SAT
} days;

inline days operator++ (days d)
{
    return static_cast <days> ((static_cast<int>(d)+1)%7);
}

- Example of overloading << operator

ostream& operator<< (ostream& out, const days& d)
{
    switch (d) {
        case SUN: out << "SUN"; break;
        case MON: out << "MON"; break;
        ...
    }

    return out;
}

- Combine above two examples

int main()
{
    days d = MON, e;
    e = ++d;    // this is calling operator++ (days) function
    cout << d << '\t' << e << endl; // calling operator<< (out, days)
}


C++ Classes
---
- Using example of a point in 2D graphs

class Point {
    public:
        double getx () {return x;}
        void setx (double v) {x=v;}

    private:
        double x,y;

}

- public, private (default), protected are access levels.

point operator+ (point &p1, point& p2)
{
    point sum = {p1.x+p2.x, p1.y+p2.y};
    return sum;
}

ostream& operator<< (ostream& out, const point &p)
{
    out << "(" << p.x << ", " << p.y << ")";
    return out;
}

- constructors
    + default constructor has no args.
    + Same name as class name.

- 'this' keyword is self referential pointer.
- destructor

- Constructor Example:

class point {
public:
    point (double x=0.0, double y=0.0):x(x), y(y) {} // constructor
    ...
private:
    double x,y;
}

    - Note the initializer list x(x), y(y). This is equivalent to
        this->x = x, this->y = y;
    - Can be done only in constructors.

Memory Management
---
- new --> equivalent to malloc()
- delete --> equivalent to free()
- They both are allocated from heap. Unlike Java, memory from heap are not
  garbage collected automatically.

Ex:
    char *s = new char[sz];
    int *p = new int(9); // single int, initialized to 9
    delete []s; // delete an array
    delete p;   // delete single element

~ destructor
---
- Destructor always has empty arg list.
- Can't be overloaded.

Randomly Generated Graph
---
    bool** graph;
    srand(time(0)); // seed
    graph = new bool*[size];
    for (int i=0; i<size; i++)
        graph[i] = new bool[size];

//2D array representing a graph

Density = Probability an edge exists, between 0 and 1

- Suppose Density=0.19

    for (int i=0; i<size; i++)
        for (int j=0; j<size; j++) {
            if (i==j) graph[i][j] = false;
            else graph[i][j] = graph[j][i] = (prob()<density);
        }

is_connected algorithm
---
    bool is_connected (bool* graph[], int size)
    {
        int old_size=0, c_size=0;
        bool* close = new bool[size];
        bool* open = new bool[size];
        for (int i=0; i<size; i++)
            open[i] = close[i] = false;
        open[0] = true;
        ...
    }

- Each iteration, add one node to closed set.

- Copy Constructors, Deep Copy vs Shallow Copy (or Referential Copy).

[1] Coursera course by Ira Pohl (Aug 2016)

@@@@@@@@@@@@@@@@@@@@@@@   OpenSwitch Tutorials     @@@@@@@@@@@@@@@@@@@@@@@@

OVSDB Overview and Troubleshooting
---
- Pub/Sub model
- Daemons connect to OVSDB server on unix socket and register for set of
  tables/columns they are interested.
- Daemons get notifications on change to these tables/columns.
- Notifications have old and new values.
- Communication happens over JSON-rpc and follows OVSDB RFC.

- vswitch.extschema - contains info on all tables/columns. OVSDB server looks
  for this on start.
- vswitch.xml - explanation of each table/column.

Commands
--
$ ps -ef | grep ovsdb-server


@@@@@@@@@@     C++ @@@@@@@@@@@
Readup More On:
- References (vs Pointers)
- try/catch (Exception Handling)

Notes:
- Access global variables in local scope using ::

    using namespace std;
    #include <iostream>

    double a = 128;

    int main ()
    {
       double a = 256;

       cout << "Local a:  " << a   << endl;
       cout << "Global a: " << ::a << endl;

       return 0;
    }

- Use 'template' to accept any datatype in to a function

    template <class T, class U>
    T minimum (T a, U b)
    {
       T r;

       r = a;
       if ((T) b < a) r = (T) b;	// typecasting b to T

       return r;
    }

- new, delete, new[], delete[]; allocate and free memory.
	char *c = new char [15];
	delete[] c;

-

@@@@@@@@@@@    STANDARD   TEMPLATE   LIBRARY    @@@@@@@@@@@@@

- STL containts five kinds of components:
    * Containers: vectors, bit vectors, lists, deques, sets, multisets, maps,
                  multimaps, queues, stacks and priority queues.
    * Iterators
    * Algorithms
    * Function Objects
    * Allocators


Vectors
=======
#include <vector>

using namespace std;

vector<T> N;    // Empty vector
vector<T> N[10]; // An array of 10 vectors. "May be" not what we want.
vector<T> N(10); // Vector of size 10.
int count = v.size();   // size of vector. Don't use this to determine if vector
                        // is empty.
bool is_empty = v.empty();

vector<int> v;
v.push_back(100);   // adds 100 at end of vector. Don't worry about memory
                    // allocation. It's NOT done one at a time.

v.resize();     // resize

NOTE: Is you push_back() after resize(), new elements are added AFTER newly
created memory and NOT INTO it.

v.clear();  // vector now has zero elems.


Vector Initialization
-------
vector<int> v1;     // Default values are zeros
...
vector<int> v2 = v1;
vector<int> v3(v1);


vector<int> nums (20, 5);   // Default values are 5.
vector<string> names (20, "Unknowns");  // Defaults to "Unknowns"


Multidimensional Vectors
--------
vector< vector<int> > Matrix;
vector< vector<int> > Matrix(N, vector<int>(M));    // of size NxM, with zero
                                                    // default values
vector< vector<int> > Matrix(N, vector<int>(M, -1));    // of size NxM, -1
                                                        // initial value.



Pairs
=====

A simple form:

template<typename T1, typename T2> struct pair {
     T1 first;
     T2 second;
};

pair<int, int> P;   // pair of ints
pair<string, pair<int, int> > P;    // pair of string and two ints.

 pair<string, pair<int,int> > P;
 string s = P.first; // extract string
 int x = P.second.first; // extract first int
 int y = P.second.second; // extract second int



Iterators
=========

References:
[1]
https://www.topcoder.com/community/data-science/data-science-tutorials/power-up-c-with-the-standard-template-library-part-1/
[2]
http://cs.brown.edu/~jak/proglang/cpp/stltut/tut.html
[3]
http://www.tutorialspoint.com/cplusplus/cpp_stl_tutorial.htm
[4]
http://en.cppreference.com/w/cpp

@@@@@@@@@@@@@@@@    NAND 2 TETRIS COURSE    @@@@@@@@@@@@@@@@@@@@@@


Week 1: Boolean Logic
-----
Commutative Law:
---
x AND y = y AND x
x OR y = y OR x

Associative Law:
---
x AND (y AND z) = (x AND y) AND z
x OR (y OR z) = (x OR y) OR z

Distributive Law:
---
x AND (y OR z) = (x AND y) OR (x AND z)
x OR (y AND z) = (x OR y) AND (x OR z)


De Morgan Law:
---
NOT (x OR y) = NOT (x) AND NOT (y)
NOT (x AND y) = NOT (x) OR NOT (y)

Idempotent Law:
---
w AND w = w
w OR w = w



Truth Table to Boolean Expression: How to?
---
- For every row resulting in 1, write a boolean expression for that row alone
  (ignore other rows). OR all these expressions.

Theorem 1:
Any boolean function can be represented using an expression containing AND, OR
and NOT.

Theorem 2:
A boolean function can be represented using AND and NOT gates only.

Theorem 3:
A boolean function can be represented using NAND gate alone.

x NAND y = NOT (x AND y)

- How can an AND be done using NAND?
    x AND y = NOT (x NAND y)

- How can a NOT be done using NAND?
    NOT (x) = x NAND x

Logic Gates
---

Truth Table of NAND gate:
    x   y   out
    0   0   1
    0   1   1
    1   0   1
    1   1   0

Functional Spec: if (x==1 and y==1) then out = 0
                 else out = 1


Other elementary gates: AND, OR and NOT


Composite Gates:
---
- Some of logic gates to form a more complex gate.


HDL:
---
- HDL is a functional/declarative language.
- Order of HDL statements is insignificant.
- Interface of logic gates:
    Not (a=, out=), And (a=, b=, out=), Or (a=, b=, out=)

- Common HDLs: VHDL, Verilog and many more.
-


Multiplexor:
-----
Three Inputs: a, b, sel
One Output: out

if (sel ==0) out = a
else out = b


Demultiplexor: Inverse of Multiplexor
---
Input: in, sel
Output: a, b

if (sel==0) {a,b} = {in,0}
else {a,b} = {0,in}



Project 1: 3 types of logic gates will be built.

    Elementary Logic Gates: Not, And, Or, Xor, Mux, DMux
    16-bit variants: Not16, And16, Or16, Mux16
    Multi-way variants: Or8Way, Mux4Way16, Mux8Way16, DMux4Way, DMux8Way



Reference:
https://www.coursera.org/learn/build-a-computer/


@@@@@@@@@@@@@@@@    UPLOAD SITES TO AWS     @@@@@@@@@@@@@@@@@@@@@@
// Steps to upload HTML/CSS static websites to AWS

1) Hosting Static Website on Amazon Web Services (AWS)

3 main steps:
    * Host/Deploy static website using AWS S3 (storage)
    * Associate domain name with your website using Route 53 (DNS)
    * Speed up your site using CloudFront (CDN)

Host Static Website:
------
- Create Amazon S3 "buckets", to store files for your website
- Upload files to this bucket.
- Configure bucket to act as website.

// Read [1] for more details explaining behavior of each entity described
// above.

- Sign up for AWS
- Sign up for IAM (Identity and Access Mgmt). [2] gives more details



References:
[1] http://docs.aws.amazon.com/gettingstarted/latest/swh/website-hosting-intro.html
[2] http://docs.aws.amazon.com/gettingstarted/latest/swh/setting-up.html



@@@@@@@@@@@@@@@@  HTML5, CSS & Javascript for Web Developers   @@@@@@@@@@@@

// starting browser-sync
$ browser-sync start --server --directory --files "*"

- HTML elements and tags are same. Used interchangeably.
- Tags have attributes (name-value pairs)
    <p id="myId"> ... </p>
- Attributes have their own requirements. For ex. id attribute must be unique
  across HTML document.

HTML Content Models: (1) Block-Level Elements (2) Inline Elements
- HTML5 has 7 types of elements

- Semantic HTML5 tags
    - May help SEO ranking. But varying opinions

- HTML5 Lists: Ordered and Unordered Lists

Character Entity Reference:
---
<   use '&lt;' instead
>   use '&gt;' instead
&   use '&amp;' instead
- There are many more (like copyright symbol etc)

Links
-----
- Internal links
    <a href="">
    // value in href is absolute or relative url
- In HTML5, <a> tag is both block and inline tag (flow and phrasing content).
  So, we can take a <a> tag and have <div> tag within it.

- <a href="#section1"> text </a>
  ...
  <section id="section1"> more text </section>

- <img src="" width="" height="" alt=""> &quot; text



Intro to CSS3
------
- Every browser comes with default style. CSS rules override it.

Anatomy of CSS Rule:
------
    p {
        color: blue;
    }

p = selector
CSS declaration --> color: blue;
color = Property
blue = Value

- Collection of CSS rules is a Style Sheet

Element, Class and ID Selectors
------
Element Selector - we select element name (like 'p' above)
Class Selector -
    .blue {     <!-- note the . in front -->
        color: blue;
    }

    - we create a 'blue' CSS class above

- How is Class Selector used?

    <p class='blue'> ... </p>
    <div class='blue'> ... </div>

ID Selector

    #name {     <!-- note the pound sign   -->
        color: blue;
    }

    <p id='name'> ... </p>
    <div id='name'> ... </div>


Grouping Selectors with commas

    div, .blue {
        color: blue;
    }

    <p class='blue'> ... </p>
    <p> ... </p>    <!-- no effect -->
    <div> ... </div>


- id attribute is least reusable as it can appear only once in the document

Combining Selectors
----

[1]
    p.big {
        font-size: 20pm;
    }

    <p class='big'> ... </p>    <!-- rule applied>
    <div class='big'> ... </div> <!-- rule NOT applied>

[2] Child Selector: Every 'p' that's direct child of 'article'

    article > p {   <!-- p is DIRECT child of article element -->
        color: blue;
    }

    <article>
        <p> ... </p>
    </article>

    <article>
        <div> <p> ... </p> </div>   <!-- unaffected -->
    </article>

[3] Descendant Selector: Every 'p' inside (at any level) of 'article'

    article p {
        color: blue;
    }

    <article>
        <div> <p> ... </p> </div>   <!-- rule applied -->
    </article>

[4]
- 1, 2, 3 are not limited to Element Selectors. It can be applied to class and
  id selectors

    <!-- every 'p' inside (at any level) an elem with class='colored'  -->
    .colored p {
        color: blue;
    }

    <!-- every elem with class='colored' that's DIRECT child of 'article' elem
    -->
    article > .colored {
        color: blue;
    }


[5] Adjacent Sibling Selector

    selector + selector

[6] General Sibling Selector

    selector ~ selector



Pseudo Class Selectors
------

    selector:pseudo-class {
        ...
    }

- Many pseudo-class selectors exists, but we cover following 5:
    :link
    :visited
    :hover
    :active
    :nth-child(...)

// TODO
- Pseudo-class selectors are very powerful. Watch Lesson 15 to get a feel.
  More reading is necessary for this.


Style Placement
------
- Have external style file and use it in all HTML files

Conflict Resolution
------
- 4 concepts come in to play to resolve conflict
    [1] Origin Precedence: Last declaration wins
    [2] Declarations Merge: Two declaration (non-conflicting) refering to same
        element gets merged. Both rules will be applied to the element.
    [3] Inheritance: DOM Tree
        A rule declared on a parent is inherited on all it's children
    [4] Specificity: Most specific selector combination wins
        - inline 'style' is highest score
        - !important ---> overrides all other CSS rules. Avoid using this.


                Specificity Score

    inline Style |  ID   |  Class, pseudo-class,   |    # of elements
                 |       |      attribute          |
     -----------------------------------------------------------------
                 |       |                         |

- Calculate the scores above and in conflict, highest score wins.

Styling
-------
- Lots of CSS properties that affect styling

    font-family: "Times New Roman", Times, serif, San Serif;
    color: #0000FF;     // RGB specification
    font-style: italic;
    font-weight: bold;
    font-size: 24px;    // its diff than points
    text-transform: lowercase;  // uppercase and others
    text-align: center;     // many more alignments

    // em = width of 'm'. It's relative font-size


//TODO: Listen to Lecture 18 Part 2, Styling Text. Instructor talks about
//cumulative doubling of font-size

The Box Model
-------------
- Around the content, 3 terms are used:
    * Padding
    * Border
    * Margin



                            (page  layout)
        +----------------------------------------------------+
        |                                                    |
        |    +==========================================+    | ---
        |    |                                          |    |  ^
        |    |    +-------------------------------+     |    |  |
        |    |    |                               |     |    |  |
        |    |    |                               |     |    |  |
        |    |    |                               |     |    |
        |    |    |           CONTENT             |     |    |height
        |    |    |                               |     |    |
        |    |    |                               |     |    |  |
        |    |    |                               |     |    |  |
        |    |    +-------------------------------+  ^  |    |  |
        |    |                                       |  |    |  v
        |    +=======================================|==+    | ---
        |  ^                    ^                    |       |
        +--|--------------------|--------------------|-------+
           |                    |                    |
        margin               border               padding

             |<-----------     width   ----------------->|



- Margins DO NOT define width of the box
- CDT (Chrome Dev Tools) have all these details

Star Selector
------
- Universal selector. Select "every" elem and apply the rule

    * {
        property: value;
        // box-sizing: border-box;
    }

- Margins are cumulative. If 2 boxes are adjacent to each other, then margin
  between the boxes add up.
- It's not same for 2 boxes, top and bottom. Larger margin takes effect.

- 'box-sizing: border-box' - prefered CSS property.
- 'width' property applies to just the content. With 'box-sizing: border-box'
  it is applied to entire box.



- Content overflow
    - 'overflow' property: 'auto', 'hidden', 'visible', 'scroll'
    - Lookup to understand
    - Users do not prefer 'double scrolling': Having two scroll bars in a
      browser.


Background Properties
------
    background-color: blue;
    background-image: url("");
    background-repeat: no-repeat; // other options
    background-position: bottom right;  // other options

    background: url("") no-repeat right center; // all properties in one
    // background overrides all other individual properties since it's listed
    // last?

Position Elems by Floating
----
    float: right;
    clear: left;    // nothing should float to left of this elem
    // It's all getting confusing and messy. Must listen few more times to
    // this lecture.

- Floats can produce flexible layouts

2 Column Layout
----

Relative Positioning
    CSS offset properties: top, bottom, left, right
- Elem is positioned relative to its position in normal doc flow
- Elem is NOT taken out of normal doc flow. Even if moved, its original spot
  is preserved ex:

        position: relative;
        top: 50px;  // negative values allowed
        left: 50px;

- html elem is ALWAYS relative=positioned
- Absolute positioning depends on closest ancestor elem whose positioning is
  set to non-static value.

Media Queries
-----

    @media (max-width: 700px) {
        p {
            color: blue;
        }
    }

- If media feature (in this case "max-width: 700px") is true, the styles
  within curly braces apply.

- max-width and min-width are most common.
- media features can be combined with 'and' and comma operators.
    Ex:
    @media (min-width: 768px) and (max-width: 991px) {...}

- Comma is treated as OR
    Ex:
    @media (min-width: 768px), (max-width: 991px) {...}


Responsive Design
------
- Site designed to adapt its layout to viewing environment by using fluid,
  proportion-based grids, flexible images, and CSS3 media queries.

- 12 column grid responsive layout is most common layout
    * 12 is used because of it's factors: 1, 2, 3, 4, 6, 12
    * To achieve fluid width, use %
- Viewport meta tag is used to turn off default mobile zooming.
    - Mobile phones zoom out the page and display it

    <meta name="viewport" content="width=device-width, initial-scale=1">
    - This tells browser to consider the width of device as real width of
      screen and set zoom level to 1 (100%)


Twitter Bootstrap
------
- Bootstrap is the most popular HTML, CSS and JS framework for developing
  responsive, mobile first projects on web

- Bootstrap grid system basics

    <div class="container">
        <div class="row">
            <div class="col-md-4"> Col 1</div>
            ...
        </div>
    </div>

    - Instead of 'div', can use other elems too
    - "container" or 'container-fluid" classes must be at top
    - All columns inside .row class
    - "row" class has negative width to align with rest of the regular
      content. Listen to Lecture 26 Part 1 for details

- col-SIZE-SPAN
    - SIZE: Screen width range identifier. Columns will collapse on each other
      (they'll stack) if width is less than SIZE
    - SPAN: How many columns the elem must span (1 to 12)








References:
[1] jsfiddle.net
[2] css-tricks.com
[3] codepen.io
[4] caniuse.com // Keeps track of changes to HTML5/CSS etc
[5] w3c.org
[6] validator.w3c.org
[7] csszengarden.com
[8] HTML5, CSS and JS course from Coursera (John Hopkins, Yaakov Chaikin)



@@@@@@@@@@@@@@@@     NOTES    FROM     VARIOUS    TALKS     @@@@@@@@@@@@
The Effective Engineer [1]:
---
- Effort != Impact
    People like Jeff Dean work whose impact is 10x that of junior engineer

- Leverage = (Impact Produced)/(Time Invested)
    a.k.a ROI, Pereto Principle.

- Leverage: Guiding metric that effective engineers use to determine where to
  invest their time and effort.

- 5 High Leverage Activities for Engineers
    * Optimize for learning

1 Optimize for learning:
    - Learning compounds over time
        How? Read books, take classes, build side projects, attend
             talks/conferences

2 Invest in Iteration Speed: How fast can you get things done?
    - By investing in Tools. Rule: if you have to do twice, build tool for
      third time.
    - How to speed up debugging, build times.

3 Validate your ideas aggressively and iteratively:
    - Incrementally validating hypothesis is a high leverage approach. It can
      save months of wasted effort later.

4 Minimizing operational maintenance
    - Minimize time spent on maintaining existing software.
    - New features introduces new fire-fighting in future. Think carefully
      before introducing them.

    Types of complexities:
        Code Complexity
        System Complexity
        Product Complexity
        Organizational Complexity

Questions:
- What's high leverage activities you can work on?
- What's one thing that you did not like in your previous company's culture?



[1] Edmond Lau: "The Effective Engineer" | Talks at Google
https://www.youtube.com/watch?v=BnIz7H5ruy0&list=WL&index=5&t=177s

===============================================================================
Deep Dive in to Hyper-V Networking [1]
---
Few key concepts:
                            Availability
                            Reliability
          Manageability     Predictability
                            Security
                            Extensibility


- Built concepts similar to LAG for NIC failover (called LBFO - Load Balancing
  Fail Over).


    +--------------------+
    |   Management OS    |
    |                    |
    |                    |    VM1   VM2   VM3  .....  VMn
    |                    |
    |   Live  Migration  |    +--------------------------+
    |                    |    |                          |
    |      Storage       |    |  Hyper-V virtual switch  |
    |                    |    |                          |
    |    Management      |    +--------------------------+
    |                    |                |
    +--------------------+    +---------------------------+
                              |     LBFO Team NIC         |
                              +---------------------------+
                                          |
                                       PHY NICs


- Few other concepts: Port ACLs, Private VLANs, DHCP Guard

- Single Route - IO Virtualization (SR-IOV). Single physical NIC talks
  directly to VM instead of going through Hyper-V Switch.
- For SR-IOV to work, Physical NICs must be capable of this feature.

- Dynamic VM Queue
- Many more features, that I saw in Cisco/Juniper type switches. Wonder why
  they are all built in to Windows Server.




[1] https://channel9.msdn.com/Events/BUILD/BUILD2011/SAC-437T

===============================================================================
Envoy, an L7 Proxy from Lyft - Talk by Architect Matt Klien

- Lyft's architecture was very simple in 2013


    client <---> internet <----> Amazon ELB <----> PHP/Apache <------> DB
                                                    monolith


- By 2015 architecture changed


    client <---> internet <----> Amazon ELB <----> PHP/Apache <------> Amazon ELB
                                 (external)         monolith           (internal)
                                                       +                   ^
                                                HAProxy+Messaging          |
                                                       |                   |
                                                       |                   |
                       +------------------------------ +                   |
                       |                               |                   |
                       |                               |                   |
                       v                               v                   v
                    MongoDB                         DynamoDB <--------> Python
                                                                       Services


- State of SoA (Service Oriented Architecture) Networking in Industry
// Very detailed. Watch video

- What is Envoy?
    - It's a self contained proxy. It is NOT a library. Think like HAProxy.
      It's like a server (Nginx).
    - Other names used is 'sidecar'.
    - It's an L3/L4 filtering mechanism: It's byte proxy at it's core. Can be
      used for things other than HTTP
    - L7 filter architecture: Packets can be routed based on L7 info
    - Built with HTTP/2 first in mind. Uses gRPC
    - Does Service Discovery and Active/Passive health checking.
    - Advanced Load Balancing: Retry, circuit breaking, timeouts, rate
      limiting, outlier detection, shadowing etc
    - Best in class Observability: stats, logging, tracing
    - Edge proxy: routing and TLS (can be used as Nginx replacement)


    +------------------------+                 +-----------------------+
    |    Service Cluster     |                 |    Service Cluster    |
    |                        |                 |                       |
    |       Service          |                 |       Service         |
    |         ^              |                 |         ^             |
    |         |              |                 |         |             |
    |         |              |                 |         |             |
    |         v              |     HTTP/2      |         v             |
    |       Envoy <----------------------------------> Envoy           |
    |         ^              |   REST/gRPC     |         ^             |
    |         |              |                 |         |             |
    +---------|--------------+                 +---------|-------------+
              |                                          |
              |                                          |
              +-----------> External Services <----------+
              |              (DynamoDB etc)              |
              |                                          |
              +----------->    Discovery      <----------+

- Service in a cluster only talks to Envoy client in local cluster


- With Envoy, Lyft's architecture today

       clients                        +---> Legacy Monolith <--+--> MongoDB
         ^                            |      (+Envoy)          |
         |                            |                        |
         |                            |                        |
         v                            |                        |
    internet <----> "Front" Envoy <---+---> Go Services <------+--> DynamoDB
                    (via TCP ELB)     |      (+Envoy)          |
                                      |                        |
                                      |                        |
                                      +---> Python Services <--+--> Stats, Tracing
                                             (+Envoy)          |
                                                               |
                                                               |
                                                               +--> Discovery


Eventually Consistent Service Discovery
----
- Fully consistent service discovery problems are very popular (etcd,
  Zookeeper, consul).
- They are very hard to run at scale.
- Service discovery is an eventually consistent problem. Envoy is designed for
  it.

Advanced LB:
----
- Different Service Discovery types
- Zone aware LB
- Dynamic stats: Per zone, canary specific stats etc
- Circuit breaking: Max connections, requests, retries
- Rate limiting:
- Request Shadowing: Fork traffic to test cluster (similar to port mirroring)
- Retries:
- Timeouts:
- Outlier detection: Consecutive 5xx
- Deploy control


Envoy Deployment @Lyft
----
- > 100 services
- > 10000 hosts
- > 2M RPS (Requests Per Sec)
- All service to service traffic (REST and gRPC)
- Many more


[1] Lyft's Envoy L7 Proxy
https://www.youtube.com/watch?v=RVZX4CwKhGE&list=WL&index=20&t=25s

===============================================================================
Introduction to Virtual Memory

- Simple systems have single address space:
    * no protection
    * processes can stomp on each other's memory

- x86 Physical Memory Map

    +---------------------------------+
    |   Memory Mapped I/O (PCI)       |
    +---------------------------------+
    |   Extended Memory               |
    |                +----------------+
    |                | High Mem Area  |
    +---------------------------------+
    |  BIOS                           |
    +---------------------------------+
    |  VGA Memory                     |
    +---------------------------------+
    |  DOS Area                       |
    +---------------------------------+

- Hard to develop for Physical Memory.

Advantages of VM
- Each process can have it's own view of memory
- Kernel memory is invisible to user space
- Process Memory can be moved and/or swapped to disk, all this is done by Kernel
  and user space program doesn't know.
- Physical RAM can be mapped to multiple processes at once (shared mem)
- Memory regions can have access permissions
    * read/write/exec

Memory Management Unit (MMU)
- Hardware responsible for implementing virtual memory
- Sits between CPU core and RAM. On most CPUs, it's part of the core.
- Separate from RAM controller
- Responsible for mapping user space programs to RAM and/or peripheral devices
- Handles Load/Store instructions
- Generates exceptions (Page Faults) on invalid access
    * Unmapped address or insufficient permission

Translation Lookaside Buffer (TLB)
- TLB is a list of mappings from virtual memory to physical address in H/W.
    * Also holds permission bits
- TLB is part of MMU.
- There are fixed # of entries in TLB, varies by CPU.


+-----------------------------------+
| SoC                               |
|                   +-------+       |
|                   |  ALU  |       |       +-------+
|                   +-------+       |       |  RAM  |
|                       |           |       |       |
|                       |           |       |       |
|   +-------+       +-------+       |       |       |
|   |  TLB  +-------+  MMU  |       |       |       |
|   +-------+       +-------+       |       |       |
|   +-------+           |           |       |       |
|   +-------+           |           |       |       |
|   +-------+       +-------+       |       |       |
|                   |Memory |       |       |       |
|                   |Contro-|-------|-------|       |
|                   |ller   |       |       +-------+
|                   +-------+       |
|                                   |
+-----------------------------------+

TLB Task
- Maps virtual address to physical address
- If not present or insufficient permission, generate a page fault

Page Faults
- It's a CPU exception, generated when software attempts to use invalid virtual
  address
    * virtual address is invalid or not mapped to physical addr
    * process has insufficient permissions
    * virtual address is valid, but swapped out

Kernel Virtual Memory
- In Linux, kernel uses virtual memory, just like user space processes. Not all
  OSes do this.
- Virtual address space is split
    * upper part is used by kernel
    * lower part is used by user space
- On 32-bit, split is at: 0xC0000000 (3GB)

    +-------------------+ 0xFFFFFFFF
    | Kernel Address    |
    +-------------------+ CONFIG_PAGE_OFFSET
    |                   | (default 0xC0000000)
    |                   |
    |                   |
    +-------------------+ 0x00000000

- Virtual address space is 4GB on 32-bit system, regardless of how much RAM we
  have.
- Kernel uses top 1GB and user space uses bottom 3GB

- 3 kinds of Virtual Addresses
    * Kernel:
        + Logical Address (kmalloc)
        + Virtual Address (vmalloc)
    * User space:
        + Virtual Address

- Kernel Logical Address:
    * Direct mapping to physical memory. If physical memory is small (say 8MB),
      then logical address maps entire 8MB directly. It helps in DMA and such.
    * In large memory systems, not all physical memory can be mapped in to
      kernel's address space. So, it's top 1GB of VM is mapped to BOTTOM half of
      physical RAM.
    * ~104MB at top of kernel VM is reserved for non-contiguous allocations
        + Used by vmalloc()
        + This is on 32-bit only. On 64-bit, there's lot more address space.



            Virtual Address Space
         +------------------------+ 0xFFFFFFFF
         |                        |
         | Kernel Virtual Address |
         |                        |
         +-------------------------------------+
         |                        |            |
         |Kernel Logical Address  |            |
         |                        |0xC0000000  |
         +-----------------------------+       |
         |                        |    |       |
         |                        |    |       |
         |                        |    |       |
         |                        |    |       |           Physical RAM
         |                        |    |       |      +------------------------+
         |                        |    |       |      | RAM without direct     |
         |   User Space Address   |    |       |      | mapping in to kernel   |
         |                        |    |       |      | space (aka High Mem)   |
         |                        |    |       +----> +------------------------+
         |                        |    |              | RAM with direct        |
         |                        |    |              | mapping in to kernel   |
         |                        |    |              | space (aka Low Mem)    |
         +------------------------+    +------------> +------------------------+


- Kernel Virtual Address:
    * Area above Kernel Logical Address space. Also called vmalloc area.
    * Non-contiguous memory mapping
    * Often used for large buffers, using vmalloc()
    * Used for memory-mapped I/O
        + Map peripheral devices in to kernel (PCIe, SoC IP blocks)
        + request_mem_region(), kmap()

User Space Virtual Addresses
----
- Only used portion of RAM are mapped, memory is non-contiguous, may be swapped
  out and can be moved.
- User space VA makes full use of MMU.
- Each process has it's own memory map:
    struct mm, pointers in task_struct
- At context switch time, the memory map is changed



Memory Management Unit (MMU)
---
- H/W component that maps VM to Physical RAM
- Page, basic unit of memory size:
    ARM - 4K
    ARM64 - 4K to 6K
    MIPS - widely configurable during kernel build time
    x86 - 4K

Terminology:
---
- Page: Unit of memory sized and aligned at page size.
- Page Frame (Frame): refers to page-sized and page-aligned physical memory
  block.
- Page is abstract, Frame is concrete
- pfn: Page Frame Number refers to physical page frames


MMU
---
- TLB holds VA + PA + Permissions

Page Faults
---
- Process accesses region of memory that's not mapped, MMU will generate a PF
- Fact of life in MMU, not a bad thing but want to minimize
- Page faults at context switch time
- Lazy allocation: Kernel will wait until pages are actually used to allocate it
  in Phys RAM

Shared Memory
---
- mmap() sys call allows user space process to request specific virtual address
  to map the shared mem region.
    * kernel may not be able to grant this request and mmap() can fail

Lazy Allocation
---
- User space program is never aware of page faults
- For processes that are time-sensitive, pages can be pre-faulted, or simply
  touched, at start of execution (something like setting to zero using memset)
    * If required, mlock() and mlockall() locks these pages in Physical memory
      and does not swap them out to disk.

Page Tables
---
- Entries in TLBs are limited resource.
- Far more mappings exists than in TLB at one time. Kernel must keep track of
  all of them.
- Kernel stores this in Page Tables
    * See struct_mm and vm_area_struct

User Space Memory Allocation
---
- There are *alloc() functions
- mmap() can be directly used to allocate and map pages
    MAP_ANONYMOUS - normal mem alloc
    MAP_SHARED - shared mem with other process
- brk()/sbrk() can be used to resize heap
- malloc/calloc uses
    brk() - for small mem alloc
    mmap() - for large mem alloc
- Stack expansion:
    * If process access mem beyond stack, page fault happens
    * Kernel allocates new page to extend the stack
    * See __do_page_fault() in arch/arm/mm/fault.c




[1] https://www.youtube.com/watch?v=EWwfMM2AW9g&index=16&list=WL&t=2s

===============================================================================
VBA Scripting

Dim <varname>
MsgBox

If answer = vbYes Then
Else
End If
===============================================================================
Performance Analysis of QUIC protocol

QUIC - Quick UDP Internet Connections

Goals of QUIC:
- Security protection comparable to TLS
- Reduce connection latency

Setup Time: QUIC vs TLS
- TLS runs over TCP, so TLS key establishment follows TCP handshake
- QUIC combines these two in to single step, kind of reducing latency by half:
    * connection establishment and key agreement

Data Exchange: QUIC vs TLS
- TLS first establishes session key and then data exchange
- QUIC sends data along with session key establishment. So, 1 RTT saved

                    QUIC Protocol
    Client                              Server
cid = {0,1}^64
                c_i_hello:cid
                ------------------->    generate stk based on client IP



cid: Connection ID picked by cliend (64 bit)
stk: source-address token used to prevent spoofing
scfg: server config contains servers public Diffie-Hellman (DH) values




[1] https://www.youtube.com/watch?v=vXgbPZ-1-us&index=38&list=WL

===============================================================================
REST API's with Flask and Python

Python Concepts
====
- Notes are in Python.txt file

HTTP Verbs
====

[verb] [path] [protocol]
Ex: GET / HTTP/1.1

Other Verbs: POST, DELETE, PUT, OPTIONS, HEAD and much more

REST Principles
====
What is REST API?
----
- It's a way of thinking on how a webserver (or service) responds to requests.
- REST responds with "resources" and not with "data"

- REST is Stateless



Reference:
[1] https://learnpythonthehardway.org/python3/
[2] http://book.pythontips.com/en/latest/
[3] Safari Books Online: REST APIs with Flask and Python (video)


=======================================================================
- How Dockers Work 1: chroot

Python example:

---
import os

uid = os.getuid()
gid = os.getgid()
os.chdir("/tmp")
os.chroot("/tmp")
os.setgroups([])
os.setgid(gid)
os.setuid(uid)
os.umask(077)
os.listdir("/")
---

- How Dockers Work 2: cgroups
- How Dockers Work 3: namespaces

- Namespaces is implemented using clone() syscall

- Dockers Design
    * A server process runs as root and controls all containers (this is
      Dockers Achiles heel)
    * This process is controlled by CLI tool 'docker'
    * Dockerfiles control images
    * The process manages containers, which are images in execution

- Registries
    * https://hub.docker.com
    * cloud.google.com/tools/container-registry <-- Google's own registry


Kubernetes Structure:
1) 'kubectl' is entry to Kubernetes deployment
2) Controller Manager controls cluster-level functions
3) Scheduler talks to nodes to allocate resources
4) nodes then host pods
5) kube-proxy runs on each node and controls the network on nodes
6) pods then have groups of docker containers in them
7) docker containers share the same logical volume

Definitions:
POD: A group of coordinating containers. It's the smallest unit the Scheduler
understands. The containers within the pod share some context and interact,
directly or indirectly, with each other.

NODES: Closely associated with machines no network

SERVICES:

KUBE-PROXY: Manages network access on a node. Controls access to services on
the node. It also does load balancing.

SCHEDULER: Which Nodes have available resources and runs Pods on them.

CONTROLLER MANAGER: controls all other cluster level functions

KUBECTL: Talks to REST endpoint (Scheduler/Controller Mgr) to make it do
things





Resources:
[1] O'Reilly Kubernetes Bootcamp: Get up to speed with Docker and Kubernetes -
Zed Shaw


===============  PROTOBUFS   ====================
- Protocol Buffers, replacements for JSON, XML and such
- Creation of Google in 2008 for internal server to server communication.
- Much faster than JSON/XML etc

- How do they work?
    * Binary serialization
    * Uses pre-determined schema for encoding/decoding
    * Compiled in to many languages

- Schema, how does it look?

    [required|optional]  [type] [var_name] = [seq no] [default=]

- Schema fields are indicated and aliased with a number and a tag
- Required, optional and repeated
- Schemas allow messages to be extensible

Advantages of Protobufs
---
- Lightweight: less space and faster transmission
- Easy to modify
- Extensible


[1] https://www.youtube.com/watch?v=72mPlAfHIjs&index=51&t=119s&list=WL
[2] https://www.youtube.com/watch?v=EAFK-tN_yaw&index=52&list=WL


===============  KAIROS DB   ====================
- Storage in Kairos can be viewed as following Java collection

HashMap<partition_key, TreeMap<cluster_key, value>>

- An example schema in Kairos looks like:

public static final String DATA_POINTS = "" +
    "CREATE TABLE IF NOT EXISTS data_points (" +
    " metric    text, " +
    " row_time  timestamp," +
    " data_type text," +
    " tags frozen<map<text, text>>," +
    " offset int, " +
    " value blob," +
    " PRIMARY KEY ((metric, row_time, data_type, tags), offset)" +
    ") WITH COMPACT STORAGE ";


[1] https://www.youtube.com/watch?v=F2ukOa1gGlo

===============  JSON SYNTAX    ====================

- JSON syntax is derived from JavaScript object notation syntax:
	* Data is in name/value pairs
	* Data is separated by commas
	* Curly braces hold objects
	* Square brackets hold arrays

- More JSON syntax:
	* Numbers in JSON can be int or float and don't need quotes
		{ "age":30 }
	* JSON values can be an array
		{ "employees":[ "John", "Anna", "Peter" ] }
	* JSON values can be JSON objects
		{ "employee":{ "name":"John", "age":30, "city":"New York" } }
	* JSON Booleans
		{ "sale":true }
	* JSON null
		{ "middlename":null }

- JSON Object Syntax
	* JSON objects are surrounded by curly braces {}.
	* JSON objects are written in key/value pairs.
	* Keys must be strings, and values must be a valid JSON data type (string,
	  number, object, array, boolean or null).
	* Keys and values are separated by a colon.
	* Each key/value pair is separated by a comma.


Differences				JSON					Javascript

Keys				Strings in double	|	Can be strings, numbers or
					quotes				|	identifier names
										|
Values				string, number, JSON|	all of JSON values + function,
					object, array, bool |   a date, undefined??
					null				|
										|
Syntax		        All strings are in  |   Strings can be in single or double
					double quotes       |   quotes
										|

===============  CELERY CONECPTS   ====================
- Used for async task scheduling.
- If a web app doesn't have to wait for a result (not-synchronous) they can
  use Celery
- It needs a message broker and a backend. Recommended: RMQ and Redis
- When using Celery, don't send task objects to Celery whose state can change.
- Celery has built in log handler and it's very useful.
- Flower - Web interface for Celery
- Celery Alternatives
    Huey
    RQ
    But they are not as configurable as Celery

[1] https://www.youtube.com/watch?v=7ZkZr7apcJs
[2] https://samgclarke.github.io/presentations/#/
[3]

===============  SCALA NOTES ===============
EXPRESSIONS
scala> 1 + 1
res0: Int = 2

VALUES
scala> val two = 1 + 1
two: Int = 2

VARIABLES
scala> var name = "steve"
name: java.lang.String = steve

scala> name = "marius"
name: java.lang.String = marius


FUNCTIONS ('def' keyword)
scala> def addOne(m: Int): Int = m + 1
addOne: (m: Int)Int

- You can leave off parens on functions with no args

Example:
scala> def three() = 1 + 2
three: ()Int

scala> three()
res2: Int = 3

scala> three
res3: Int = 3


ANONYMOUS FUNCTIONS
scala> (x: Int) => x + 1
res2: (Int) => Int = <function1>

scala> res2(1)
res3: Int = 2




[1] https://twitter.github.io/scala_school/basics.html

===============  LINUX PERFORMANCE TRAINING NOTES ===============

Key useful tools:
    free -m
    top
    iostat 1
    sar -B 1
    sar -n DEV
    vmstat 1
    pidstat


Contents Covered:
====
- The USE method
- CPU sampling with perf
- Recording CPU stacks with 'perf record -ag -F'
- Flame graphs and missing symbols

- Resolving stack symbols for JIT- or interpreted runtimes using perf maps
- Java perf-map-agent, Node.js --perf_basic_prof
- Use jps and perf-map-agent to record stack traces of a JVM application

Kernel tracepoints, kprobes, and perf-tools
----
- Kernel tracepoints and perf support for recording them (perf -e)
- Interesting kernel tracepoints: scheduler, disk, network device
- Demo: recording fork events with perf -e (poor man’s execsnoop)
- Brendan Gregg’s perf-tools repository -- an ftrace + perf_events frontend
- Demo: characterizing load generated by a process using syscount -c -p PID
- Dynamic instrumentation with kprobes and uprobes (tracepoints aren’t available)
- Discovering functions to probe with /proc/kallsyms and objdump -T
- Demo: probe-based ad-hoc investigations (failed malloc(), long pthread_mutex_lock(), MySQL queries)
- Diagnose an application that fails to start because it keeps looking for a
configuration file that doesn’t exist

- First, identify heavy disk writes performed by the application, and their latency
- Then, collect call stacks with perf -g -p PID -e … for the block_rq_insert
tracepoint and optionally create a flame graph to pinpoint where the writes are
coming from


eBPF
====
- The challenges with perf and similar tools that we’re trying to address, mostly
that of overhead (transferring all events to user space for analysis via a
file)
- BPF history -- from Berkeley Socket Filters to tomorrow’s tracing infrastructure
- BPF support in various kernel versions
- Structure and architecture of a BPF tracing program
- Example: contrast between perf-based slow file I/O investigation and BPF-based (only aggregate interesting events and report summaries)


perf notes
=======
- Find out where a program is taking so long to run
	$ perf record -g -F 997 -- ./primes

	/*
        -g  record call stack
        -F  inspection frequency (per second)
        -a  includes events from other processes
        -t  trace single thread within a process
	*/

- Inspecting perf's report
    $ perf report --stdio
    $ perf annotate

- Using FlameGraphs
    $ perf script > primes.stacks
	$ FlameGraph/stackcollapse-perf.pl primes.stacks > primes.collapsed
	$ FlameGraph/flamegraph.pl primes.collapsed > primes.svg

Profiling Java Code
====
- To help perf find Java symbols for your code, use perf-map-agent
- More scripts in perf-map-agent repo to record and report Java app behavior
	perf-java-record-stack
	perf-java-report-stack


Lab: Broken File I/O
---
- Lookup where process is spending most of it's time
    $ pidstat -u -p $(pidof <name>) 1   // show every second
    $ syscount -c -p $(pidof <name>)    // syscount is from perf-tools
    $ opensnoop -p $(pidof <name>)      // snoops all open() syscalls


Lab: Slow File I/O
---
    $ ./iolatency       // get an idea of disk I/O
    $ ./bitesize        //

$ perf record -p $(pidof logger) -e block:block_rq_insert -g -- sleep 10


Day 2
====
- Look at tpoint, kprobe, uprobe in perf-tools/ folder

- tpoint - tracepoints. Statically available in kernel
- kprobe - Kernel dynamic tracing
- uprobe - Userspace dynamic tracing

- perf-tools are much more useful/streamlined than just perf itself


eBPF
====
- Disadvantages of perf?
    * perf_event handler intercepts workflow in kernel
    * perf relies on pushing lot of data to userspace through files for
      analysis
    * perf designed to push small data from kernel to userspace for analysis
    * perf cannot do analysis of packets efficiently

- BPF - Very efficient way of filtering packets in kernel

- seccomp and XDP uses BPF to provide ...

- BCC BPF Front-End Tools
    * BPF Compiler Collection (BCC)

- USDT probes
- uprobes



// some of these pages may be removed (from class notes)
[1] https://gist.github.com/goldshtn/c5656c1fe91b7970d7182add128a21c8
[2] https://github.com/goldshtn/linux-tracing-workshop/blob/master/perf.md
[3]

[] https://github.com/BrendanGregg/FlameGraph
[] https://github.com/jrudolph/perf-map-agent
[] https://www.kernel.org/doc/Documentation/kprobes.txt
[] https://github.com/brendangregg/perf-tools
[] https://github.com/iovisor/bcc


===============  LEARNING REST - STARING WITH REST API  ==============

Contents
--------
Theory                          Applied
REST Defined                    A nodeJS Dev environment
REST & HTTP                     nodeJS and REST
REST & CRUD ops                 REST routes
Designing for REST              REST controllers
                                Testing our REST APIs

- REST: REpresentational State Transfer
    An architectural style for designing networked applications

HTTP Request Types
-----
GET: Retrieves content from a specified resource
POST: Submits data for processing to a URI
PUT: Sends info to update a server resource
DELETE: Sends request to delete a resource

Others: HEAD, OPTIONS, PARTIAL

API Structure Example
-----
GET: https://mydomain/api/items
GET: https://mydomain/api/items/details/22
POST: https://mydomain/api/items/details/22

- There can be multiple request types to same end point


REST + CRUD ops
---------------


API Type -->    Create      Read        Update      Delete
                new item    an item     an item     an item
------------------------------------------------------------
HTTP Request    POST        GET         UPDATE      DELETE
                                        (or PUT)

Database        Create      Read        Update      Delete


Example APIs
------------
https://api.chucknorris.io
https://api.chucknorris.io/jokes/random
https://api.chucknorris.io/jokes/random?category={category}
https://api.chucknorris.io/jokes/categories
https://api.chucknorris.io/jokes/search?query={query

< --- stopped the video after a while. It went too much in to Node and stuff,
which I was not interested at this time ---->

[1] Safari Books Online Video

==================    NOTES   FROM   PYTHONG   TALKS   ===============
- Look these up:
    reversed(), enumerate(), zip(), izip(), sorted()

[1] Transforming Code in to Beautiful, Idiomatic Python - Raymond Hettinger
https://www.youtube.com/watch?v=anrOzOapJ2E&list=WL&index=23&t=19s


===============   LEARNING DB DESIGN WITH MYSQL   =====================
Contents
---
- Junction Tables
- Relations & Foriegn Keys
- Aliases & Joins
- Math, IN clauses, GROUP BY, ORDER BY
- Subqueries


// there are not_null, primary_key and such important attributes to add for
// each field
CREATE TABLE <tablename> (field1 TYPE ...)

INSERT INTO <tablename> (field1, field2, ...) VALUES ("value1", "value2", ....)

// ALTER is used to change datatype of a field
ALTER TABLE <tablename> MODIFY <field> type

SELECT field1, field2 FROM database.table

- search names (or part of fields) using % char (similar to * for grep
  searches)
- && is logical AND. Can use either
- || is logical OR

- ORDER BY <field> [DESC]; orders the fields in ascending or descending order
- LIMIT <start>, <end>; that many records are displayed

- UPDATE <tablename> SET name="New name" WHERE id=<id>

// foriegn key constraints needs to be addressed first.
// CASCADE - if primary entry is deleted, all foriegn key entries are deleted
// RESTRICT - prevent deletion of entry if foriegn key exists
// no restriction - deleting an entry leaves foriegn keys in respective tables
- DELETE FROM <tablename> WHERE id=<id>

Aliases & Joins
// Column aliasing
- SELECT first_name AS "first name",
         last_name AS "last name"
  FROM customers


// Table aliasing
- SELECT p.name, pc.name, p.price
  FROM product_categories AS pc, products AS p
  WHERE p.category=pc.id


// JOINS
- INNER, LEFT, RIGHT

// INNER JOIN
SELECT <fields>
FROM table_a A
INNER JOIN table_b B
ON A.key = B.key

// LEFT JOIN
SELECT *
FROM table_a A
LEFT JOIN table_b B
ON A.key = B.key

// RIGHT JOIN
SELECT *
FROM table_a A
RIGHT JOIN table_b B
ON A.key = B.key

// INNER JOIN 3 tables
SELECT <fields>
FROM table_a A
INNER JOIN table_b B ON A.key = B.key
INNER JOIN table_c C ON C.key = B.key
ORDER BY C.first_name   // optional


// Concat, Count, Union
- Union of two tables only if both have same # of columns and datatypes of
  those columns. Column names can be different

// Gives one instance of each city in both tables
SELECT city FROM customers
UNION
SELECT city FROM vendors
ORDER BY city

- UNION ALL will gives all instances of eacy city in tables
SELECT city, zipcode FROM customers
WHERE zipcode='11111'
UNION ALL
SELECT city, zipcode FROM vendors
WHERE zipcode='11111'
ORDER BY city

// Concat
SELECT id, CONCAT(first_name, '-', email) AS "Name & Email" FROM customers

// Count
SELECT COUNT(*) FROM products

// Distinct option
SELECT COUNT(DISTINCT category) FROM products


// IN clause, similar to OR statements
// NOT IN clause is opposite of IN clause
SELECT city, state FROM customers WHERE state IN ("MA", "FL", "MD")

// Output with operations as column names and result as values
SELECT (1+1), (2*3), (4/2)

// Max, Min, Avg
SELECT MAX(price) FROM products
SELECT MIN(price) FROM products
SELECT AVG(price) FROM products

// Subqueries
SELECT name, MIN(price) FROM products
WHERE id IN (SELECT id FROM products WHERE description LIKE "%treadmill%")


// Version of SQL
SELECT VERSION()

// Date & Time
SELECT NOW()


// GROUP BY function
SELECT customer, COUNT(*) AS "Number of Orders" FROM orders WHERE customer=1

SELECT customer, COUNT(*) AS "Number of Orders" FROM orders GROUP BY customer

TODO: Whatever fields are SELECT'ed, must also be present in GROUP BY.
Research more on this.


Cheat sheet
----
- Pretty print. Couple of methods:
mysql> pager less -SFX
mysql> SELECT * FROM sometable\G; << pretty print only this command

- Details about current database
mysql> SELECT database();
mysql> \s
mysql> status;
mysql> show variables;  << tons of info
mysql> show tables;     << list all tables in db, including views
mysql> describe <table-name>;   << gives lot of details about the table


- How to list all views?
SHOW FULL TABLES IN database_name WHERE TABLE_TYPE LIKE 'VIEW';
SHOW FULL TABLES WHERE TABLE_TYPE LIKE 'VIEW'; << if you are already in a database


Resources:
[1] Udemy course on Database Design -

===============   PERFORCE  USEFUL  COMMANDS     =====================

Setup Commands
---
P4CLIENT=bhaskar; export P4CLIENT
- All p4 commands will now use workspace: bhaskar

p4 client
    - Describes client workspace to Perforce server
    - Contains number of fields: Root and View are most imp
    Root: Topmost directory where all files are saved.
    View: Files in depot that are mapped to client workspace view

p4 sync     - syncs all files in the view from depot to your workspace
p4 sync ... - syncs only files in current directory from depot to workspace


Few commands to look in to
---
p4 workspace
p4 add, edit, delete, revert
p4 submit


// If you haven't checked out files that you edited, do following to get changes
// tracked by Perforce
p4 reconcile ...

//
p4 revert


Reporting Commands
---
p4 help commands
p4 help <command>
p4 help usage
p4 help views
p4 help
p4 info

p4 have
p4 sync -n



Typical Perforce Workflow [1]
---
1. Run `p4 edit` on each file you want to edit. You need to tell Perforce which files
you're editing. If you're adding new files, use `p4 add`. If you're deleting
files, use `p4 delete`.

2. Make your code changes.

3. Run `p4 change` to create a changeset. Here you can create a description of your
change and optionally add or remove files from your changeset too. You can run
`p4 change CHANGE_NUMBER` to edit the description later if necessary.

4. You can make additional code changes if you need to. If you need to
add/edit/delete other files, you can use `p4 {add,edit,delete} -c CHANGE_NUMBER
FILE`.

5. Run `p4 sync` to pull in the latest changes from the server.

6. Run `p4 resolve` to resolve any conflicts from syncing.

7. When you're ready to submit your change, run `p4 submit -c CHANGE_NUMBER`.


FAQ
===
1. How to see all changes submitted by a user
    p4 changes -s submitted -u bruno //depot/...    entire depot
    p4 changes -s submitted -u bruno ...            current repo
    p4 changes -s submitted -u bruno <filename>     just this file


2. Edit description of a changelist
    p4 change <changelist-number>


3. Show code changes in a changelist
    p4 describe <changelist-number>

4. Show list of modified (but not committed) files
    p4 diff -f -sa
    p4 diff -f -sa ...

5. All the files that's modified but not committed
    p4 opened

6. All commits to a file
    p4 filelog <file-name>
        -l  long form description

7. Backing out submitted changelist
    Read this article --> https://community.perforce.com/s/article/3474

8. How to get diff of all files in pending changelist
    p4 opened -c 999 | awk 'BEGIN { FS = "#" } // { print "p4 diff " $1 }' | csh

9. Merge changes from one branch to another
   p4 integ -d -i ~/pan/$1/...@$3,@$3 ~/pan/$2/...
    $1 = source dir
    $3 = changelist number
    $2 = dest dir

Reference:
[1] https://stackoverflow.com/a/17306729/630866


===============   GIT  vs   PERFORCE             =====================

$ git checkout:
    The equivalent is 'p4 sync' in CLI and 'Get latest revision' from GUI.

$ git commit:
    p4 submit. But this operation does more. It combines 'git commit and push'

$ git push or pull:
    There's no equivalent in p4

Reference:
[1] https://stackoverflow.com/a/17331274/630866


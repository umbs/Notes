0. Install cscope_maps.vim plugin available here: 
http://cscope.sourceforge.net/cscope_maps.vim

1. Building database 
cd /my/project 
find . -name "*.[chxsS]" -o -name "*.ddl" > cscope.files 
cscope -b -q # builds a database using cscope.files

2. Set environment variable for Vim to locate cscope database 
# In bash shell  
cd /my/project 
CSCOPE_DB=$HOME/my/project/cscope.out; export CSCOPE_DB 

3. Following commands (which can be mapped in .vimrc file) can be used to navigate code.  
"C-\ g" go to global definition of function/struct 
"C-\ c" display list of callers for a function/struct 
"C-\ s" display list of references for an identifier (function, struct, vairable) 
"C-t" go back previous position on tag stack
"C-o" go back to ... 
“:cs f e <string>” does a regex search through all of the files in cscope.files for <string>. There’s a bit of glitchiness in quoting/escaping/parsing the string, so I generally find it’s best to enclose any possibly-special characters in [] to have them treated as character sets. For example, instead of foo->bar I’ll usually use foo[-][>]bar.
“:cs f f <string>” will show you a list of files in cscope.files matching <pattern>. Actually I just noticed it while composing this article, and should use it more myself.
“:cs help” will show you some of the other options. 

4. :help cscope-howtouse 
This has very helpful resource on connecting cscope database with Vim. 

Resources: 
[1] http://cscope.sourceforge.net/cscope_vim_tutorial.html
[2] http://hekafs.org/index.php/2013/03/glusterfs-cscope-and-vim-oh-my/

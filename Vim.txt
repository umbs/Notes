Window Splitting 
----------------
:vsp // Vertical split 
:sp  // Horizontal split 
:vsp <file> // Opens <file> in new window 
:10sp // Specify split height 
:set splitright // Opens window in right [for vertical splits] and becomes
                  active
:set splitbelow // same for horizontal window 
ctrl + w, <number>, < // reduce width of window by <number> 
ctrl + w, <number>, > // increase width of window by <number> 
ctrl + w, | // max out window width 
ctrl + w, _ // max out window height 
ctrl + w, = // normalize all window sizes 
ctrl + w, R // swap both windows [including buffers] 

vim -O file1 file2 // open two files side by side 


Regular Expressions
-------------------
. (dot)	Any single character except newline
*	zero or more occurances of any character
[...]	Any single character specified in the set
[^...]	Any single character not specified in the set
^	Anchor - beginning of the line
$	Anchor - end of line
\<	Anchor - begining of word
\>	Anchor - end of word
\(...\)	Grouping - usually used to group conditions
\n	Contents of nth grouping

[...] - Set Examples
--------------------
[A-Z]	The SET from Capital A to Capital Z
[a-z]	The SET from lowercase a to lowercase z
[0-9]	The SET from 0 to 9 (All numerals)
[./=+]	The SET containing . (dot), / (slash), =, and +
[-A-F]	The SET from Capital A to Capital F and the dash (dashes must be specified first)
[0-9 A-Z]	The SET containing all capital letters and digits and a space
[A-Z][a-zA-Z]	In the first position, the SET from Capital A to Capital Z
In the second character position, the SET containing all letters

Regular Expression Examples
---------------------------
/Hello/	Matches if the line contains the value Hello
/^TEST$/	Matches if the line contains TEST by itself
/^[a-zA-Z]/	Matches if the line starts with any letter
/^[a-z].*/	Matches if the first character of the line is a-z and there is at least one more of any character following it
/2134$/	Matches if line ends with 2134
/\(21|35\)/	Matches if the line contains 21 or 35
Note the use of ( ) with the pipe symbol to specify the 'or' condition
/[0-9]*/	Matches if there are zero or more numbers in the line
/^[^#]/	        Matches if the first character is not a # in the line

Notes:
1. Regular expressions are case sensitive
2. Regular expressions are to be used where pattern is specified


Very good resource on Vim Regex 
--------------------------------
http://vimregex.com/


Substituting Tips 
-----------------
Save typing by using \zs and \ze to set the start and end of a pattern.
For example, instead of: 

:s/Copyright 2007 All Rights Reserved/Copyright 2008 All Rights Reserved/

Use: 

:s/Copyright \zs2007\ze All Rights Reserved/2008/

Tab Views 
----------
:tabnew <file> // opens <file> in a new tab 
:tabp // previous tab 
:tabn // next tab 

In Normal mode 
gt // go to next tab 
gT // go to previous tab 
ngt // got to tab no. n 

vim -p file1 file 2 // open multiple files in tab mode 


Diff
----
vimdiff file1 file2 // diff two files side by side 



Code Folding
------------
Reference - :help folding 
            :help za 
            :help zo
            :help zc

Synopsis - Using commands here, code in a file can be temporarily folded
[hidden]. Folding helps in navigating a file quickly as parts of the file
is hidden. 

zc - close a fold 
zo - open a fold 
za - toggle a fold [open if its closed and vice versa] 

zC, zO, zA are similar but inner folding levels are also affected by them,
not just the level at which cursor is present.


Page Scroll
-----------
^d ^u   Scroll half a page down or up 
^f ^b   Scroll full page up or down

Reformatting
------------
In the .vimrc file, `set textwidth=80` (or whatever column width). 
- `gg`  go to top of file
- `gqG` globally set the entire file to 80 width column. It joins lines. If you
        dont want lines to be joined, have a blank one in between. 
- `gq}` change only current paragraph 
- `G`   go to beginning of last line 
- `ga`  Gives ASCII value of character under cursor 

Wikia Tips
----------
1. Insert line numbers in file (not just display) or a portion of file?

    http://vim.wikia.com/wiki/Insert_line_numbers

    :%s/^/\=printf("%d", line("."))   // prints current line number. Read
                                      // above link for more granularity.   


Code Indentation
----------------
1. Shift+V and then up/down 
2. hit =

Key Mappings
-------------
{cmd} {attr} {lhs} {rhs}

where
{cmd}  is one of ':map', ':map!', ':nmap', ':vmap', ':imap',
       <buffer>, <silent>, <expr> <script>, <unique> and
       <special>. More than one attribute can be specified to a map.
{lhs}  left hand side, is a sequence of one or more keys that are being
       mapped.
{rhs}  right hand side, is the sequence of keys that the {lhs} keys are
       mapped to.

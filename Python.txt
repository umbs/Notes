                    Python Concepts
                    ===============
Table of Contents
---


- Dynamically-typed, strong-reference language
- Lists, Tuples, Sets & Dictionaries
- OOP:
    * @classmethod and @staticmethod
    *
- Functions are first-class citizens
- Nested functions
- decorators, generators
- named args and positional args to functions
- Context Managers (Ex: with open(...) as foo:)
- List slicing
- List comprehension and Dictionary comprehension


Lists, Tuples & Sets
----
- Tuples are immutable
- Sets are unique and unordered

Ex:
    grades = [77, 80, 99, 100]  # Lists are ordered
    tups   = (77, 80, 99, 100)  # Typles are immutable
    sets   = {77, 80, 99, 100, 100} # Sets are unordered and unique. There'll
                                    # be only ONE 100
    print(len(grades))          # len() function calculates length of list
    print(sum(grades))          # sum() adds up elements of list

Set operations
----
    tups = (77, 80, 99)
    tups = tups + (100,)    # Note the , after 100. That's important
    tups2 = (15)            # NOT a tuple. It's just a number with braces
    tups2 = (15,)           # This is a tuple.
    tups2 = 15,             # This is a tuple.

    grades[0] = 50  # assignment. Allowed
    tups[0] = 50    # Not Allowed. Tuples are immutable
    sets[0] = 50    # Sets are unordered. We don't know which element is being
                    # replaced


- Add element to a set
    sets.add(60)
- Add element to a list
    grades.append(60)

- Union, Intersection, Difference of two sets
    set_one = {1,2,3,4,5}
    set_two = {1,3,5,7,9}
    print(set_one.union(set_two))           # output: 1,2,3,4,5,7,9
    print(set_one.intersection(set_two))    # output: 1,3,5
    print(set_one.difference())


Loops
----
- Iterables are strings, lists, set, tuples and more

my_string = "Hello"
for c in my_string:
    print(c)


Input()
----
- Accepts input from CLI

user_input = input("Please answer yes/no (y/n)?")   # Python 3.5 only
if user_input == 'n':
    # do something

If statements
----

List Comprehension
----
my_list = [x for x in range(5)]     # way of building a list
my_list = range(5)                  # also does the same thing
my_list = [x*3 for x in range(5)]   # [0, 3, 6, 9, 12]

print([n for n in range(10) if n%2==0])


Dictionary
----
- key:value pairs. Both keys and values can be anything. Very similar to hash
- Value can be another list, set, tuple or even dictionary

lottery_player = {
    'name' : 'Rolf',
    'numbers' : (13, 45, 66, 23, 22)    # value is a tuple
}

universities = {
    {
        'name' : 'Oxford',
        'location' : 'UK'
    },

    {
        'name' : 'MIT',
        'location' : 'US'
    }
}

- Accessing a key in Dictionary is using [] braces
    lottery_player['numbers']


@classmethod and @staticmethod
----
- A method that doesn't change for various objects of class can be declared
  with @classmethod. This makes it like a 'global' method for the class.

class Student:
    def __init__(self):
        self.name = "Greg"
        self.school = "MIT"

    @classmethod
    def get_school(cls):
        print("I study at MIT")

    @staticmethod
    def get_student():
        print("I'm a student")

- These methods are called using class name


OOP
---
Inheritance in Python classes
---
class Student:
    """
    all Student stuff
    """
    def __init__(self, name, school):
        self.name = name
        self.school = school


class WorkingStudent(Student):
    def __init__(self, name, school, salary):
        super().__init__(name, school)
        self.salary = salary

- Combining @classmethod with Inheritance can become complex

- Before object gets destroyed, __del__ is called

class Class1(object):
    def __init__(self,name):
        self.name = name
    def listname(self):
        return self.name
    # the following method is executed during object deletion
    def __del__(self):
        print self.name,"destroyed"
obj1 = Class1('Darth Vader')

# first method of deleting object
del obj1	# __del__ is called here

# second method of destroying an object? Make it point to some other object
obj1 = 2

- __str__ is special method (magic method) that's printed whenever object is
  printed

class Class1(object):
    def __init__(self,name):
        self.name = name # this is a instance variable
    def listname(self):
        return self.name
    def __del__(self):
        print self.name,"destroyed"
    # in the following method, a string is returned whenever the print
    # is called with the object as input
    def __str__(self):
        return "The name is %s " %self.name

obj1 = Class1('Darth Vader')
# This will call __str__ method, thus enabling a pretty printing of object
print obj1
del obj1


- In Python 3, it's recommended to have __repr__ instead of __str__

Inheritance
---
# An example of an inherited class
class Animal(object):
    def say_something(self):
        return "I'm an animal!"

'''
Here Cat and Dog are child classes that are inheriting from Animal.
The child class, say_something method overrides the behavior
of the say_something of the parent class. This is called method overriding.
'''

class Cat(Animal):
    def say_something(self):
        return "Meow"

class Dog(Animal):
    def say_something(self):
        return "Bow-wow"

a = Animal()
print a.say_something()
d = Dog()
print d.say_something()	# method overriding
c = Cat()
print c.say_something()


- Accessing parent class methods is done using:
    super(child_class_name, self).some_parent_method()


*args and **kwargs
---
- *args means variable function arguments, passed as List
- **kwargs means variable keyword arguments, passed as Set. Note that keyword
  arguments MUST follow positional arguments



Strings & Texts
----
- f-strings:

    ten = 10
    f"Hello world! There are {ten} people in world"

- Another formatting using .format() syntax

    hilarious = False
    joke_evaluation = "Isn't that joke so funny?! {}"
    print(joke_evaluation.format(hilarious))

- *args and **kwargs
    *args means variable function arguments
    **kwargs means variable key-value arguments

- Generators
    * Iterable
    * Iterator
    * Iteration

- Iterable: Any Python object that can give us an Iterator
- Python object should have __iter__ or __getitem__ method defined
  which returns an Iterator


- Iterator: Any Python object that has next method (Python2) or __next__
  method defined.

- Iteration: Process of iterating

Generators:
-----------
- Generators: They are Iterators that can iterate only once. Usually
  implemented as functions that 'yeild' and not 'return'

- Used when calculating large sets of data where intermediate results is not
  required to be saved for long.

Ex: Fibonacci numbers

# generator version
def fibon(n):
    a = b = 1
    for i in range(n):
        yield a
        a, b = b, a + b

This is used as follows:

for x in fibon(10000):
    print(x)

Map, Filter and Reduce
----
- Functional approach to programming

Map: Applies a function to all items in an input list
    map(function_to_apply, list_of_inputs)

Ex:

items = [1, 2, 3, 4, 5]
squared = []
for i in items:
    squared.append(i**2)

Above task can be simplified using Map as follows:

items = [1, 2, 3, 4, 5]
squared = list(map(lambda x: x**2, items))

It's possible to have list of functions as input on which to run Map()
function.

def multiply(x):
    return (x*x)
def add(x):
    return (x+x)

funcs = [multiply, add]
for i in range(5):
    value = list(map(lambda x: x(i), funcs))
    print(value)

# Output:
# [0, 0]
# [1, 2]
# [4, 4]
# [9, 6]
# [16, 8]



Filter: Create a list of elements for which a function returns True

number_list = range(-5, 5)
less_than_zero = list(filter(lambda x: x < 0, number_list))
print(less_than_zero)

# Output: [-5, -4, -3, -2, -1]



Reduce: Applies a rolling computation to sequential pair of elements of list.
For example, product of elements of a list

product = 1
list = [1, 2, 3, 4]
for num in list:
    product = product * num

# product = 24


With reduce:

from functools import reduce
product = reduce((lambda x, y: x * y), [1, 2, 3, 4])


Decorators: Functions that modify behavior of other functions.
- Very useful concept. Read up online.


Reference:
[1] https://learnpythonthehardway.org/python3/
[2] http://book.pythontips.com/en/latest/
[3] Safari Books Online: REST APIs with Flask and Python (video)
[4] UCSC Extension Class: Python for Programmers

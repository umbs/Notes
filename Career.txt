@@@@@@@@@@@@@@@@@@@@@@@@   Career Advice    @@@@@@@@@@@@@@@@@@@@@@@@@
Louie Bacaj: Timeless Career Advice for Software Engineer
https://www.jointaro.com/course/timeless-career-advice-for-software-engineers/empathy-as-an-engineer/

    - Software Engineers create value. If you are not doing it, you are
      wasting time.
    - Growth Fixes Many Problems:
        - If you can grow the pie, you'll have all the time and resources
          in the world to do what you want.

    - The Soft Skills
        - If you learn to write, you'll pass 90% of those who wont
            - Write blog posts about your work, its free credibility for you AND your company.
            - Write internal memos, write architecture docs, write documentations, just write :)
            - Highlight your team. Give!!! It'll come back.
            - Writing is thinking. You'll out-think people if you write.
            - A public body of essays is FAR BETTER than a resume and LinkedIn.
        - Present your ideas and what you are doing to people regularly.
        - Setup team wide and then company wide initiatives.

    - Empathy is a Superpower as an Engineer
        - People that stare at screens seem to be less empathetic to others
          situation. If you can change that, your career will sky rocket.

    - Compounding Engineers vs Detracting Engineers
        - Compounding Engineers aka 10x Engineers
            - They consistently make solid tradeoffs
            - Their knowledge compounds and they compound teams efforts
            - They live pareto distribution: 80/20 rule.
            - They understand leverage well, they can go into debt and then get out.
            - They can communicate and help their whole team.

        - Detracting Engineers aka 0.1x Engineers

    - The Promotion Formula: It has 2 steps
        - Add Value
        - Make Noise

    - How do Promotions Work?
        - Always about future scope
            - It's about what you did for them. But really, it's about what
              else you can do for them.

        - From Promo Nomination to Official Promo
            - Calibrations at multiple levels.
            - Always a fight between managers.
            - At times done by committee, especially for very Senior ICs.

    - One on Ones
        - Most important meetings of your career.
        - DO NOT let your One on Ones with your manager lapse.
        - Dont stop with your manager
            - Have them with your peers, business people, product people, engineers from other teams etc.

    - Mid year reviews and Annual reviews
        - Take these seriously.
        - Take notes on your work throughout the year.
        - Write a great review for yourself.

@@@@@@@@@@@@@@@@@@@@@@@@   High Growth Engineer   @@@@@@@@@@@@@@@@@@@@@@@@@
Jordan Cutler: 21 Ways to Make Yourself a Better Engineer (From a Senior Engineer at Pintrest)
https://www.jointaro.com/lesson/vPzzNqoi2EtYYhBGlRPG/21-ways-to-make-yourself-a-better-engineer-from-a-senior-engineer-at-pinterest/

Agenda (3 tips in each category)
    1. Career Growth
        Tip 1: Solve hard problems for the team.
        Tip 2: Become a go-to person in the team. (There's a course on Taro)
        Tip 3: Be visible
    2. Influence
        Tip 1: (Framing) Speak to the other person's interests.
        Tip 2: Influence is more relationships than wording
        Tip 3: Add "What do you think?" to your repertoire
    3. Communication
        Tip 1: Lead with the takeaways. Bottom Line Up Front (BLUF)
        Tip 2: There's no such thing as overcommunication
        Tip 3: Use clear deltas
    4. Managing Up
        Tip 1: Remove uncertainty
        Tip 2: Set up recurring feedback and growth check-ins
        Tip 3: Ask about their priorities more
    5. Leading Projects
        Tip 1: Add accountability
        Tip 2: Go the extra mile for meetings.
        Tip 3: Setup 1:1s with teammates on the project
    6. Technical Skills
        Tip 1: Build deep understanding of the tools you use
        Tip 2: Don't move past problems right after you solve it.
        Tip 3: Learn functional programming
    7. Productivity
        Tip 1: Plan ahead of time.
        Tip 2: Optimize your terminal setup.
        Tip 3: Pair with others. Watch what they do.


Career Growth
-------------
Tip 1: Solve hard problems for the team.

    - Be known for making your teammates lives easier, not "snacking"
        - Do high impact, high effort projects.

    - Snacking = Low impact and low effort.

Tip 2: Become a go-to person in the team. (There's a course on Taro)

Tip 3: Be visible
    Do:
        - Share what you know.
        - Share what you figure out.
        - Give presentations.

    Dont:
        - Be silent in meetings.
        - Only focus on your work.
        - Assume your work speaks for itself. You speak for your work.


Influence
---------
Tip 1: (Framing) Speak to the other person's interests.
    - Framing changes how other person hears your message.
    - Always share how what you want will benefit the other person.
    - "Whats in it for them?"
    - Framing:
        - Who am I speaking to?
        - What do I want?
        - What do they care about?
        - How can I frame it in those terms?

    - Example: You want to be promoted - How do you frame it?
        - You'd like to expand your impact on the team and want help creating a plan
            "Hey Jeff, I've really been loving the projects I've worked on the
            past few quarters. I appreciate you giving me the opportunity to
            work on these. I'd love to expand my impact on the team. What would
            a plan look like to get to the next level."

Tip 2: Influence is more relationships than wording

Tip 3: Add "What do you think?" to your repertoire
    Do:
        - Use more "?"s
        - End suggestions with "What do you think?"

    Don't:
        - Only assert your opinion and leave it at that.


Communication
-------------
Tip 1: Lead with the takeaways. Bottom Line Up Front (BLUF)
    - Start with take aways first and end with the context.
    - Always callout what you want from the other person first and then provide context.

    Do:
        - I think X. Here's why.
        - I need X from you. Here's the context.

    Don't:
        - Bunch of context. Finally, my point is ...
        - Bunch of context. Can I get help?

Tip 2: There's no such thing as overcommunication
    - One of the worst things you can do for your career is be invisible.
    - Share updates, ask for feedback, give kudos.
    - Small and frequent > Large and infrequent.

Tip 3: Use clear deltas
    Example:
        Don't:
            Reduced home page load time by adding caching.

        Do:
            Reduced home page load time by 2s thourgh additional caching.

        Best:
            Cut home page load time by 66%, from 3s to 1s through additional
            caching. This resulted in a 30% increase in engagement, accounting for
            more than half of our quarter OKR target.


    Example:
        Don't:
            How do you think I could have done better?

        Do:
            How could I have done 10% better?

        Best:
            How could I have executed on this project at the Senior level? What
            traits of Senior engineer do you see that I can work to
            incorporate?


Managing Up
-----------
Tip 1: Remove uncertainty

    - Your View:
        - Discuss work, do work.
    - Managers View:
        - Discuss work.
        - Worry about:
            - Are they doing work?
            - Are they doing a good job?
            - Can I not worry about it?
        - Resolve above uncertainty

    - Week by Week Plan
        Planned                             Accomplished
        1. ...                              1. DONE
        2. ...                              2. DONE
        3. ...                              3. In Progress


Tip 2: Set up recurring feedback and growth check-ins
    - Start, Stop, Continue
    - Growth Plan
    - Eng performance attributes.
    - Bonus Tip: Be HUNGRY for feedback


Tip 3: Ask about their priorities more
    - Managers priorities = your priorities
    - "Whats top-of-mind for you?"
    - "How can I help you more?"


Leading Projects
----------------
Tip 1: Add accountability
    - Use weekly syncs.
    - Teammates must feel they are part of the project.

Tip 2: Go the extra mile for meetings.
    - Ineffective vs Effective meetings.

Tip 3: Setup 1:1s with teammates on the project
    - 1:1s allow the unspoken to come out.
    - Get their honest thoughts and feedback.
        - "Whats going well?"
        - "What can we do better?"
        - Optional:
            - "What feels like waste of time?"
            - "What annoys you?"


Technical Skills
----------------
Tip 1: Build deep understanding of the tools you use

Tip 2: Don't move past problems right after you solve it.

Tip 3: Learn functional programming


Productivity
------------
Tip 1: Plan ahead of time.
Tip 2: Optimize your terminal setup.
Tip 3: Pair with others. Watch what they do.



@@@@@@@@@@@@@@@@     NOTES    FROM     VARIOUS    TALKS     @@@@@@@@@@@@
[1] Edmond Lau: "The Effective Engineer" | Talks at Google
https://www.youtube.com/watch?v=BnIz7H5ruy0&list=WL&index=5&t=177s

The Effective Engineer:
---
- Effort != Impact
    People like Jeff Dean work whose impact is 10x that of junior engineer

- Leverage = (Impact Produced)/(Time Invested)
    a.k.a ROI, Pereto Principle.

- Leverage: Guiding metric that effective engineers use to determine where to
  invest their time and effort.

- 5 High Leverage Activities for Engineers

1 Optimize for learning:
    - Learning compounds over time
        How? Read books, take classes, build side projects, attend
             talks/conferences

2 Invest in Iteration Speed: How fast can you get things done?
    - By investing in Tools. Rule: if you have to do twice, build tool for
      third time.
    - How to speed up debugging, build times.

3 Validate your ideas aggressively and iteratively:
    - Incrementally validating hypothesis is a high leverage approach. It can
      save months of wasted effort later.

4 Minimizing operational maintenance
    - Minimize time spent on maintaining existing software.
    - New features introduces new fire-fighting in future. Think carefully
      before introducing them.

    Types of complexities:
        Code Complexity
        System Complexity
        Product Complexity
        Organizational Complexity

Questions:
- What's high leverage activities you can work on?
- What's one thing that you did not like in your previous company's culture?



@@@@@@@@@@@@@@@@@@@@@@@@   Nail Your Promotion As A Software Engineer   @@@@@@@@@@@@@@@@@@@@@@@@@

https://www.jointaro.com/course/nail-your-promotion-as-a-software-engineer/how-this-course-works/

